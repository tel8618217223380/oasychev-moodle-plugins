<?php
/* Driver template for the PHP_lock_formal_langs_parser_cpp_languagerGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class lock_formal_langs_parser_cpp_languageyyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof lock_formal_langs_parser_cpp_languageyyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof lock_formal_langs_parser_cpp_languageyyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof lock_formal_langs_parser_cpp_languageyyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof lock_formal_langs_parser_cpp_languageyyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class lock_formal_langs_parser_cpp_languageyyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "langs_src/parser_cpp_language.y"
class block_formal_langs_parser_cpp_language#line 102 "langs_src/parser_cpp_language.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 3 "langs_src/parser_cpp_language.y"

    // Root of the Abstract Syntax Tree (AST).
    public $root;
	// Current id for language
	public $currentid;
	// A mapper for parser
	public $mapper;
	// Test, whether parsing error occured
	public $error = false;
    // A current rule for a parser
	public $currentrule = null;
	
	protected function create_node($type, $children) {
		$result = new block_formal_langs_ast_node_base($type, null, $this->currentid, false);
		$this->currentid = $this->currentid + 1;
		$result->set_childs($children);
		$result->rule = $this->currentrule;
		return $result;
	}
	
	public function perform_repeat_lookup($oldmajor, $token) {
		if (is_object($token) == false)
		{
			return $oldmajor;
		}
		if ($token->type() == 'identifier')
		{
			return $this->mapper->major_code_for($token);
		}
		return $oldmajor;
	}
	
#line 140 "langs_src/parser_cpp_language.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const THENKWD                        =  1;
    const ELSEKWD                        =  2;
    const BINARYOR                       =  3;
    const LOGICALOR                      =  4;
    const LOGICALAND                     =  5;
    const BINARYXOR                      =  6;
    const BINARYAND                      =  7;
    const NOTEQUAL                       =  8;
    const EQUAL                          =  9;
    const UINDIRECTION                   = 10;
    const UADRESS                        = 11;
    const NAMESPACE_RESOLVE              = 12;
    const UMINUS                         = 13;
    const UPLUS                          = 14;
    const UBRACKET                       = 15;
    const TYPEUNARY                      = 16;
    const MACROPARAMETERPRIORITY         = 17;
    const NAMESPACEKWD                   = 18;
    const IDENTIFIER                     = 19;
    const LEFTFIGUREBRACKET              = 20;
    const RIGHTFIGUREBRACKET             = 21;
    const SEMICOLON                      = 22;
    const CLASSKWD                       = 23;
    const STRUCTKWD                      = 24;
    const UNIONKWD                       = 25;
    const COLON                          = 26;
    const PUBLICKWD                      = 27;
    const PROTECTEDKWD                   = 28;
    const PRIVATEKWD                     = 29;
    const SIGNALSKWD                     = 30;
    const SLOTSKWD                       = 31;
    const ENUMKWD                        = 32;
    const COMMA                          = 33;
    const ASSIGN                         = 34;
    const LEFTROUNDBRACKET               = 35;
    const RIGHTROUNDBRACKET              = 36;
    const BINARYNOT                      = 37;
    const CUSTOMTYPENAME                 = 38;
    const TEMPLATEKWD                    = 39;
    const LESSER                         = 40;
    const GREATER                        = 41;
    const TYPENAMEKWD                    = 42;
    const OPERATOROVERLOADDECLARATION    = 43;
    const CONSTKWD                       = 44;
    const PREPROCESSOR_ENDIF             = 45;
    const PREPROCESSOR_ELIF              = 46;
    const PREPROCESSOR_ELSE              = 47;
    const PREPROCESSOR_IFDEF             = 48;
    const PREPROCESSOR_IF                = 49;
    const PREPROCESSOR_DEFINE            = 50;
    const PREPROCESSOR_INCLUDE           = 51;
    const WHILEKWD                       = 52;
    const DOKWD                          = 53;
    const FORKWD                         = 54;
    const RETURNKWD                      = 55;
    const CONTINUEKWD                    = 56;
    const GOTOKWD                        = 57;
    const TRYKWD                         = 58;
    const CATCHKWD                       = 59;
    const ELLIPSIS                       = 60;
    const SWITCHKWD                      = 61;
    const CASEKWD                        = 62;
    const DEFAULTKWD                     = 63;
    const IFKWD                          = 64;
    const TYPEDEF                        = 65;
    const BREAKKWD                       = 66;
    const NEWKWD                         = 67;
    const DELETE                         = 68;
    const LEFTSQUAREBRACKET              = 69;
    const RIGHTSQUAREBRACKET             = 70;
    const STATICKWD                      = 71;
    const EXTERNKWD                      = 72;
    const REGISTERKWD                    = 73;
    const VOLATILEKWD                    = 74;
    const FRIENDKWD                      = 75;
    const BINARYXOR_ASSIGN               = 76;
    const BINARYOR_ASSIGN                = 77;
    const BINARYAND_ASSIGN               = 78;
    const RIGHTSHIFT_ASSIGN              = 79;
    const LEFTSHIFT_ASSIGN               = 80;
    const MODULO_ASSIGN                  = 81;
    const DIVISION_ASSIGN                = 82;
    const MULTIPLY_ASSIGN                = 83;
    const PLUS_ASSIGN                    = 84;
    const MINUS_ASSIGN                   = 85;
    const NOT_EQUAL                      = 86;
    const LESSER_OR_EQUAL                = 87;
    const GREATER_OR_EQUAL               = 88;
    const LEFTSHIFT                      = 89;
    const RIGHTSHIFT                     = 90;
    const MINUS                          = 91;
    const PLUS                           = 92;
    const MODULOSIGN                     = 93;
    const DIVISION                       = 94;
    const MULTIPLY                       = 95;
    const AMPERSAND                      = 96;
    const LOGICALNOT                     = 97;
    const DECREMENT                      = 98;
    const INCREMENT                      = 99;
    const DOT                            = 100;
    const RIGHTARROW                     = 101;
    const CONST_CAST                     = 102;
    const STATIC_CAST                    = 103;
    const DYNAMIC_CAST                   = 104;
    const REINTERPRET_CAST               = 105;
    const NUMERIC                        = 106;
    const CHARACTER                      = 107;
    const STRING                         = 108;
    const PREPROCESSOR_STRINGIFY         = 109;
    const PREPROCESSOR_CONCAT            = 110;
    const SIZEOF                         = 111;
    const SIGNED                         = 112;
    const TYPENAME                       = 113;
    const UNSIGNED                       = 114;
    const LONG                           = 115;
    const YY_NO_ACTION = 719;
    const YY_ACCEPT_ACTION = 718;
    const YY_ERROR_ACTION = 717;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 3979;
static public $yy_action = array(
 /*     0 */   284,  223,   11,  299,  322,  384,  383,  382,  346,  302,
 /*    10 */   311,  310,  162,  247,  137,   74,   75,   33,   37,   81,
 /*    20 */   272,  235,  384,  383,  382,   99,  105,    9,  255,   47,
 /*    30 */   199,  434,  435,  436,  218,   27,  214,   30,  233,  186,
 /*    40 */   225,  344,  444,  224,  686,  544,  278,  102,  287,   51,
 /*    50 */    43,  375,  103,  450,  449,  448,  451,  452,  347,  144,
 /*    60 */   369,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*    70 */   151,  266,  324,   92,   91,   73,   70,   83,   85,   87,
 /*    80 */    82,   84,  122,  249,  245,  290,  240,  277,  409,  412,
 /*    90 */   411,  288,   29,  289,  251,  368,  203,  207,  284,  223,
 /*   100 */    11,  309,  322,  384,  383,  382,  433,  302,  311,  310,
 /*   110 */   106,  256,  137,  122,  249,   33,  229,   81,  272,  235,
 /*   120 */   686,  374,   72,   71,  105,  432,  255,  205,  199,  434,
 /*   130 */   435,  436,  218,   27,  214,   30,  233,  186,  225,  252,
 /*   140 */   248,  224,   61,  544,  278,  102,  287,   51,   43,   59,
 /*   150 */   140,  450,  449,  448,  451,  452,  471,  144,  205,  154,
 /*   160 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*   170 */    47,   92,   91,  454,  238,   83,   85,   87,   82,   84,
 /*   180 */    59,  543,  245,  290,  240,  277,  409,  412,  411,  288,
 /*   190 */   217,  289,  251,  368,  203,  207,  284,  223,   11,  337,
 /*   200 */   322,  384,  383,  382,  103,   66,   68,   67,   69,   64,
 /*   210 */   137,   65,  379,   33,  243,   81,  272,  235,   78,   80,
 /*   220 */    79,  255,  105,  445,    8,   12,  199,  434,  435,  436,
 /*   230 */   218,   27,  214,   30,  233,  186,  225,   47,   47,  224,
 /*   240 */    25,  226,  278,  102,  287,   51,   43,   77,   76,  450,
 /*   250 */   449,  448,  451,  452,  155,  202,  201,  167,  352,  183,
 /*   260 */   187,  403,   86,  151,  266,  353,  364,  255,   42,   92,
 /*   270 */    91,  129,  115,   83,   85,   87,   82,   84,  686,   47,
 /*   280 */   245,  290,  240,  277,  409,  412,  411,  288,   63,  289,
 /*   290 */   251,  368,  203,  207,  284,  223,   11,  338,  322,  384,
 /*   300 */   383,  382,  190,  442,  227,  267,  265,   36,  137,  150,
 /*   310 */   266,   33,  301,   81,  272,  235,  308,  305,  279,  303,
 /*   320 */   105,  298,  255,  205,  199,  434,  435,  436,  218,   27,
 /*   330 */   214,   30,  233,  186,  225,  275,  253,  224,  395,  387,
 /*   340 */   278,  102,  287,   51,   43,   60,  543,  450,  449,  448,
 /*   350 */   451,  452,  362,  144,  686,  154,  202,  201,  167,  352,
 /*   360 */   183,  187,  403,   86,  151,  266,   95,   92,   91,  426,
 /*   370 */   182,   83,   85,   87,   82,   84,  401,  172,  245,  290,
 /*   380 */   240,  277,  409,  412,  411,  288,  374,  289,  251,  368,
 /*   390 */   203,  207,  284,  223,   11,  341,  322,  384,  383,  382,
 /*   400 */   221,  182,  398,  116,  345,  248,  137,  269,  168,   33,
 /*   410 */   297,   81,  272,  235,  141,  374,  243,  366,  105,  286,
 /*   420 */   255,   47,  199,  434,  435,  436,  218,   27,  214,   30,
 /*   430 */   233,  186,  225,  216,  248,  224,   62,  404,  278,  102,
 /*   440 */   287,   51,   43,  138,    1,  450,  449,  448,  451,  452,
 /*   450 */   472,  144,  261,  154,  202,  201,  167,  352,  183,  187,
 /*   460 */   403,   86,  151,  266,  318,   92,   91,  353,  364,   83,
 /*   470 */    85,   87,   82,   84,  469,   47,  245,  290,  240,  277,
 /*   480 */   409,  412,  411,  288,  237,  289,  251,  368,  203,  207,
 /*   490 */   284,  223,   11,  317,  322,  384,  383,  382,  372,   47,
 /*   500 */   250,  425,   28,   47,  137,  219,   24,   33,  470,   81,
 /*   510 */   272,  235,  256,  260,   40,    6,  105,  446,  255,  205,
 /*   520 */   199,  434,  435,  436,  218,   27,  214,   30,  233,  186,
 /*   530 */   225,   47,   47,  224,  461,  222,  278,  102,  287,   51,
 /*   540 */    43,   60,  139,  450,  449,  448,  451,  452,  453,  144,
 /*   550 */   215,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*   560 */   151,  266,   38,   92,   91,  109,  166,   83,   85,   87,
 /*   570 */    82,   84,  121,  419,  245,  290,  240,  277,  409,  412,
 /*   580 */   411,  288,  133,  289,  251,  368,  203,  207,  284,  223,
 /*   590 */    11,  295,  322,  384,  383,  382,  230,   47,  198,  468,
 /*   600 */   463,  115,  137,  388,    1,   33,  390,   81,  272,  235,
 /*   610 */   281,  143,  343,    7,  105,  231,  255,  429,  199,  434,
 /*   620 */   435,  436,  218,   27,  214,   30,  233,  186,  225,  272,
 /*   630 */    41,  224,  130,    4,  278,  102,  287,   51,   43,  110,
 /*   640 */   215,  450,  449,  448,  451,  452,  476,  144,  420,  154,
 /*   650 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*   660 */   334,   92,   91,  421,  227,   83,   85,   87,   82,   84,
 /*   670 */   125,  321,  245,  290,  240,  277,  409,  412,  411,  288,
 /*   680 */    97,  289,  251,  368,  203,  207,  284,  223,   11,  320,
 /*   690 */   322,  384,  383,  382,  118,  256,  127,  119,   26,  268,
 /*   700 */   137,   34,  161,   33,  215,   81,  272,  235,  439,  438,
 /*   710 */     8,   12,  105,  241,  255,  467,  199,  434,  435,  436,
 /*   720 */   218,   27,  214,   30,  233,  186,  225,  294,  414,  224,
 /*   730 */   128,  396,  278,  102,  287,   51,   43,   46,  215,  450,
 /*   740 */   449,  448,  451,  452,  406,  144,  367,  154,  202,  201,
 /*   750 */   167,  352,  183,  187,  403,   86,  151,  266,  413,   92,
 /*   760 */    91,   94,  282,   83,   85,   87,   82,   84,   61,  316,
 /*   770 */   245,  290,  240,  277,  409,  412,  411,  288,   98,  289,
 /*   780 */   251,  368,  203,  207,  284,  223,   11,  393,  322,  384,
 /*   790 */   383,  382,  120,   96,  474,  459,  458,  268,  137,  142,
 /*   800 */   315,   33,  370,   81,  272,  235,  457,  135,  365,  205,
 /*   810 */   105,  263,  255,  373,  199,  434,  435,  436,  218,   27,
 /*   820 */   214,   30,  233,  186,  225,  397,  304,  224,  271,  354,
 /*   830 */   278,  102,  287,   51,   43,   10,  363,  450,  449,  448,
 /*   840 */   451,  452,  462,  144,  101,  154,  202,  201,  167,  352,
 /*   850 */   183,  187,  403,   86,  151,  266,  407,   92,   91,  259,
 /*   860 */   404,   83,   85,   87,   82,   84,  136,   35,  245,  290,
 /*   870 */   240,  277,  409,  412,  411,  288,  401,  289,  251,  368,
 /*   880 */   203,  207,  284,  223,   11,  331,  322,  384,  383,  382,
 /*   890 */   264,  164,  257,  402,  132,  399,  137,  189,   47,   33,
 /*   900 */    93,   81,  272,  235,   90,  254,  415,  385,  105,  195,
 /*   910 */   255,  416,  199,  434,  435,  436,  218,   27,  214,   30,
 /*   920 */   233,  186,  225,  200,  325,  224,  447,  177,  278,  102,
 /*   930 */   287,   51,   43,  389,  332,  450,  449,  448,  451,  452,
 /*   940 */   466,  144,  241,  154,  202,  201,  167,  352,  183,  187,
 /*   950 */   403,   86,  151,  266,  174,   92,   91,  246,  417,   83,
 /*   960 */    85,   87,   82,   84,  293,    5,  245,  290,  240,  277,
 /*   970 */   409,  412,  411,  288,  335,  289,  251,  368,  203,  207,
 /*   980 */   284,  223,   11,  328,  322,  384,  383,  382,  423,  391,
 /*   990 */   232,  330,  336,  408,  137,  194,  420,   33,  420,   81,
 /*  1000 */   272,  235,  420,  420,  420,  420,  105,  420,  255,  420,
 /*  1010 */   199,  434,  435,  436,  218,   27,  214,   30,  233,  186,
 /*  1020 */   225,  420,  420,  224,  420,  420,  278,  102,  287,   51,
 /*  1030 */    43,  420,  420,  450,  449,  448,  451,  452,  405,  144,
 /*  1040 */   420,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*  1050 */   151,  266,  420,   92,   91,  420,  420,   83,   85,   87,
 /*  1060 */    82,   84,  420,  420,  245,  290,  240,  277,  409,  412,
 /*  1070 */   411,  288,  420,  289,  251,  368,  203,  207,  284,  223,
 /*  1080 */    11,  443,  322,  384,  383,  382,  420,  420,  420,  420,
 /*  1090 */   420,  420,  137,  420,  420,   33,  420,   81,  272,  235,
 /*  1100 */   420,  420,  420,  420,  105,  420,  255,  420,  199,  434,
 /*  1110 */   435,  436,  218,   27,  214,   30,  233,  186,  225,  420,
 /*  1120 */   420,  224,  420,  420,  278,  102,  287,   51,   43,  420,
 /*  1130 */   420,  450,  449,  448,  451,  452,  478,  144,  420,  154,
 /*  1140 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*  1150 */   420,   92,   91,  420,  420,   83,   85,   87,   82,   84,
 /*  1160 */   333,  420,  245,  290,  240,  277,  409,  412,  411,  288,
 /*  1170 */   420,  289,  251,  368,  203,  207,  284,  223,   11,  272,
 /*  1180 */   322,  384,  383,  382,  422,  420,  420,  420,  420,  420,
 /*  1190 */   137,  420,  420,   33,  420,   81,  272,  235,  420,  420,
 /*  1200 */   420,  420,  105,  420,  255,  420,  199,  434,  435,  436,
 /*  1210 */   218,   27,  214,   30,  233,  186,  225,  420,  420,  224,
 /*  1220 */   420,  420,  278,  102,  287,   51,   43,  420,  420,  450,
 /*  1230 */   449,  448,  451,  452,  477,  144,  420,  154,  202,  201,
 /*  1240 */   167,  352,  183,  187,  403,   86,  151,  266,  420,   92,
 /*  1250 */    91,  420,  420,   83,   85,   87,   82,   84,  210,  420,
 /*  1260 */   245,  290,  240,  277,  409,  412,  411,  288,  420,  289,
 /*  1270 */   251,  368,  203,  207,  284,  223,   11,  272,  322,  384,
 /*  1280 */   383,  382,  422,  420,  420,  420,  420,  431,  441,  420,
 /*  1290 */   420,   33,  420,   88,  272,  235,  440,  420,  420,  420,
 /*  1300 */   105,  420,  255,  420,  420,  418,  430,  436,  218,   27,
 /*  1310 */   214,   30,  233,  186,  225,  420,  420,  224,  420,  420,
 /*  1320 */   278,  102,  287,   51,   43,  420,  420,  450,  449,  448,
 /*  1330 */   451,  452,  465,  144,  420,  154,  202,  201,  167,  352,
 /*  1340 */   183,  187,  403,   86,  151,  266,  420,   92,   91,  420,
 /*  1350 */   420,   83,   85,   87,   82,   84,  420,  420,  245,  290,
 /*  1360 */   240,  277,  409,  412,  411,  288,  420,  289,  251,  368,
 /*  1370 */   203,  207,  272,  306,  437,  371,  394,  131,  105,   89,
 /*  1380 */   386,    3,  300,  307,  124,  424,  420,  272,  420,  255,
 /*  1390 */   104,  420,  420,  105,  112,  170,  213,  420,  420,  420,
 /*  1400 */   420,  228,  420,   13,  420,  420,  170,  247,  209,  342,
 /*  1410 */   117,  420,  206,  428,  323,  420,  420,  326,  276,  456,
 /*  1420 */   144,  100,  154,  202,  201,  167,  352,  183,  187,  403,
 /*  1430 */    86,  151,  266,  420,  375,  420,  420,  392,  437,  420,
 /*  1440 */   394,  131,  420,   89,  386,  375,  251,  368,  203,  207,
 /*  1450 */   420,  420,  420,  255,  104,  420,  272,  420,  112,  170,
 /*  1460 */   213,  251,  368,  203,  207,  420,  420,   13,  234,  114,
 /*  1470 */   314,  339,  209,  342,  117,  255,  420,  420,  323,  420,
 /*  1480 */   420,  326,  276,  456,  144,  100,  154,  202,  201,  167,
 /*  1490 */   352,  183,  187,  403,   86,  151,  266,  420,  375,  306,
 /*  1500 */   437,  272,  394,  131,  420,   89,  386,  105,  312,  307,
 /*  1510 */   124,  420,  420,  267,  265,  255,  104,  149,  266,  420,
 /*  1520 */   112,  170,  213,  420,  420,   31,  420,  420,  420,   13,
 /*  1530 */   251,  368,  203,  207,  209,  342,  117,  420,  420,  420,
 /*  1540 */   323,  420,  420,  326,  276,  456,  144,  100,  154,  202,
 /*  1550 */   201,  167,  352,  183,  187,  403,   86,  151,  266,   57,
 /*  1560 */   375,  718,   20,  319,  437,  410,  394,  131,  420,   89,
 /*  1570 */   386,  420,  420,  431,  441,  251,  368,  203,  207,  255,
 /*  1580 */   104,   39,  440,  420,  112,  170,  213,  389,  349,  350,
 /*  1590 */   348,  351,  430,   13,  420,  420,  420,  113,  209,  342,
 /*  1600 */   117,  111,  153,  262,  323,  420,  420,  326,  276,  456,
 /*  1610 */   144,  100,  154,  202,  201,  167,  352,  183,  187,  403,
 /*  1620 */    86,  151,  266,  420,  375,   15,  319,  437,  100,  394,
 /*  1630 */   131,  420,   89,  386,  420,  420,  420,  420,  420,  420,
 /*  1640 */   420,  375,  255,  104,  420,  420,  420,  112,  170,  213,
 /*  1650 */   420,  420,  409,  412,  411,  288,   13,  289,  420,  376,
 /*  1660 */   420,  209,  342,  117,  170,  247,  420,  323,  420,  420,
 /*  1670 */   326,  276,  456,  144,  100,  154,  202,  201,  167,  352,
 /*  1680 */   183,  187,  403,   86,  151,  266,  420,  375,   18,  319,
 /*  1690 */   437,  420,  394,  131,  420,   89,  386,  420,  420,  420,
 /*  1700 */   420,  420,  204,  375,  420,  255,  104,  420,  420,  420,
 /*  1710 */   112,  170,  213,  420,  420,  420,  420,  420,  420,   13,
 /*  1720 */   420,  420,  255,  420,  209,  342,  117,  420,  420,  420,
 /*  1730 */   323,  420,  420,  326,  276,  456,  144,  100,  154,  202,
 /*  1740 */   201,  167,  352,  183,  187,  403,   86,  151,  266,  420,
 /*  1750 */   375,   22,  319,  437,  420,  394,  131,  420,   89,  386,
 /*  1760 */   267,  265,  355,   86,  151,  266,  420,  420,  255,  104,
 /*  1770 */   420,  420,  420,  112,  170,  213,  420,  420,  420,  420,
 /*  1780 */   420,  420,   13,  420,  420,  255,  420,  209,  342,  117,
 /*  1790 */   420,  420,  420,  323,  420,  420,  326,  276,  456,  144,
 /*  1800 */   100,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*  1810 */   151,  266,  420,  375,   14,  319,  437,  420,  394,  131,
 /*  1820 */   420,   89,  386,  267,  265,  356,   86,  151,  266,  420,
 /*  1830 */   420,  255,  104,  420,  420,  420,  112,  170,  213,  420,
 /*  1840 */   420,  420,  420,  420,  420,   13,  420,  420,  255,  420,
 /*  1850 */   209,  342,  117,  420,  420,  420,  323,  420,  420,  326,
 /*  1860 */   276,  456,  144,  100,  154,  202,  201,  167,  352,  183,
 /*  1870 */   187,  403,   86,  151,  266,  420,  375,   16,  319,  437,
 /*  1880 */   420,  394,  131,  420,   89,  386,  267,  265,  380,   86,
 /*  1890 */   151,  266,  420,  420,  255,  104,  420,  420,  420,  112,
 /*  1900 */   170,  213,  420,  420,  420,  420,  420,  420,   13,  420,
 /*  1910 */   420,  255,  420,  209,  342,  117,  420,  420,  420,  323,
 /*  1920 */   420,  420,  326,  276,  456,  144,  100,  154,  202,  201,
 /*  1930 */   167,  352,  183,  187,  403,   86,  151,  266,  420,  375,
 /*  1940 */    17,  319,  437,  420,  394,  131,  420,   89,  386,  267,
 /*  1950 */   265,  358,   86,  151,  266,  420,  420,  255,  104,  420,
 /*  1960 */   420,  420,  112,  170,  213,  420,  420,  420,  420,  420,
 /*  1970 */   420,   13,  420,  420,  255,  420,  209,  342,  117,  420,
 /*  1980 */   420,  420,  323,  420,  420,  326,  276,  456,  144,  100,
 /*  1990 */   154,  202,  201,  167,  352,  183,  187,  403,   86,  151,
 /*  2000 */   266,  420,  375,   21,  319,  437,  420,  394,  131,  420,
 /*  2010 */    89,  386,  267,  265,  381,   86,  151,  266,  420,  420,
 /*  2020 */   255,  104,  420,  420,  420,  112,  170,  213,  420,  420,
 /*  2030 */   420,  420,  420,  420,   13,  420,  420,  255,  420,  209,
 /*  2040 */   342,  117,  420,  420,  420,  323,  420,  420,  326,  276,
 /*  2050 */   456,  144,  100,  154,  202,  201,  167,  352,  183,  187,
 /*  2060 */   403,   86,  151,  266,  420,  375,   19,  319,  437,  420,
 /*  2070 */   394,  131,  420,   89,  386,  267,  265,  359,   86,  151,
 /*  2080 */   266,  420,  420,  255,  104,  420,  420,  420,  112,  170,
 /*  2090 */   213,  420,  420,  420,  420,  420,  420,   13,  420,  420,
 /*  2100 */   255,  420,  209,  342,  117,  420,  420,  420,  323,  420,
 /*  2110 */   420,  326,  276,  456,  144,  100,  154,  202,  201,  167,
 /*  2120 */   352,  183,  187,  403,   86,  151,  266,  420,  375,   23,
 /*  2130 */   319,  437,  420,  394,  131,  420,   89,  386,  267,  265,
 /*  2140 */   357,   86,  151,  266,  420,  420,  255,  104,  420,  420,
 /*  2150 */   420,  112,  170,  213,  420,  420,  420,  420,  376,  420,
 /*  2160 */    13,  420,  420,  170,  247,  209,  342,  117,  420,  420,
 /*  2170 */   420,  323,  420,  420,  326,  276,  456,  144,  100,  154,
 /*  2180 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*  2190 */   420,  375,    2,  319,  437,  420,  394,  131,  420,   89,
 /*  2200 */   386,  211,  375,  420,  420,  420,  420,  420,  420,  255,
 /*  2210 */   104,  384,  383,  382,  112,  170,  213,  420,  420,  420,
 /*  2220 */   420,  420,  420,   13,  420,  258,  272,  420,  209,  342,
 /*  2230 */   117,  420,  105,  420,  323,  420,  420,  326,  276,  456,
 /*  2240 */   144,  100,  154,  202,  201,  167,  352,  183,  187,  403,
 /*  2250 */    86,  151,  266,  420,  375,  420,  420,  410,  420,  450,
 /*  2260 */   449,  448,  451,  452,  420,  420,  420,  420,  420,  420,
 /*  2270 */   420,  420,  420,   33,  273,   88,  272,  420,  244,  170,
 /*  2280 */   247,  420,  105,  170,  247,  420,   66,   68,   67,   69,
 /*  2290 */    64,  420,   65,  420,  420,  420,  420,  420,  340,  420,
 /*  2300 */   251,  368,  203,  207,  420,   51,   43,  410,  420,  450,
 /*  2310 */   449,  448,  451,  452,  228,  420,  420,   55,  375,  170,
 /*  2320 */   247,  420,  375,   39,  420,  420,  427,  420,  420,   92,
 /*  2330 */    91,  420,  420,   83,   85,   87,   82,   84,  420,  420,
 /*  2340 */   245,  290,  240,  277,  409,  412,  411,  288,  420,  289,
 /*  2350 */   251,  368,  203,  207,  410,  420,  420,  420,  375,   45,
 /*  2360 */    49,   56,   52,   44,   53,   54,   58,   50,   48,   63,
 /*  2370 */    33,  464,   88,  272,  420,  420,  420,  420,  420,  105,
 /*  2380 */   272,  255,  420,  378,  420,  173,  105,  420,  420,  420,
 /*  2390 */   245,  290,  240,  277,  409,  412,  411,  288,  420,  289,
 /*  2400 */   420,   39,   51,   43,  272,  420,  450,  449,  448,  451,
 /*  2410 */   452,  292,  144,  420,  154,  202,  201,  167,  352,  183,
 /*  2420 */   187,  403,   86,  151,  266,  420,   92,   91,  420,  420,
 /*  2430 */    83,   85,   87,   82,   84,  420,  420,  245,  290,  240,
 /*  2440 */   277,  409,  412,  411,  288,  420,  289,  251,  368,  203,
 /*  2450 */   207,  410,  420,  255,  251,  368,  203,  207,  420,  420,
 /*  2460 */   291,  420,  420,  420,  420,  420,  420,   33,  126,   88,
 /*  2470 */   272,  420,  409,  412,  411,  288,  105,  289,  255,  272,
 /*  2480 */   420,  420,  420,  475,  144,  105,  154,  202,  201,  167,
 /*  2490 */   352,  183,  187,  403,   86,  151,  266,  420,  420,   51,
 /*  2500 */    43,  420,  420,  450,  449,  448,  451,  452,  473,  144,
 /*  2510 */   420,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*  2520 */   151,  266,  420,   92,   91,  420,  420,   83,   85,   87,
 /*  2530 */    82,   84,  420,  420,  245,  290,  240,  277,  409,  412,
 /*  2540 */   411,  288,  420,  289,  251,  368,  203,  207,  410,  420,
 /*  2550 */   255,  296,  420,  251,  368,  203,  207,  420,  420,  420,
 /*  2560 */   420,  420,  420,  420,   33,  420,   88,  272,  420,  420,
 /*  2570 */   420,  420,  420,  105,  255,  420,  420,  420,  420,  420,
 /*  2580 */   420,  148,  420,  154,  202,  201,  167,  352,  183,  187,
 /*  2590 */   403,   86,  151,  266,  420,  420,   51,   43,  420,  420,
 /*  2600 */   450,  449,  448,  451,  452,  145,  420,  154,  202,  201,
 /*  2610 */   167,  352,  183,  187,  403,   86,  151,  266,  420,  420,
 /*  2620 */    92,   91,  420,  420,   83,   85,   87,   82,   84,  420,
 /*  2630 */   420,  245,  290,  240,  277,  409,  412,  411,  288,  420,
 /*  2640 */   289,  251,  368,  203,  207,  420,  420,  392,  437,  420,
 /*  2650 */   394,  131,  420,   89,  386,  420,  420,  420,  420,  420,
 /*  2660 */   420,  420,  410,  255,  104,  420,  420,  420,  112,  170,
 /*  2670 */   213,  420,  420,  420,  420,  420,  420,   13,   33,  420,
 /*  2680 */    88,  272,  209,  342,  117,  420,  255,  105,  323,  420,
 /*  2690 */   420,  326,  276,  456,  144,  100,  154,  202,  201,  167,
 /*  2700 */   352,  183,  187,  403,   86,  151,  266,  420,  375,  420,
 /*  2710 */    51,   43,  420,  420,  450,  449,  448,  451,  452,  156,
 /*  2720 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*  2730 */   420,  420,  420,  420,   92,   91,  420,  420,   83,   85,
 /*  2740 */    87,   82,   84,  420,  420,  245,  290,  240,  277,  409,
 /*  2750 */   412,  411,  288,  420,  289,  251,  368,  203,  207,  479,
 /*  2760 */   420,  394,  131,  420,  123,  386,  420,  420,  420,  420,
 /*  2770 */   420,  420,  420,  420,  255,  108,  420,  420,  377,  134,
 /*  2780 */   170,  247,  420,  170,  247,  420,  420,  420,  420,  255,
 /*  2790 */   420,  274,  420,  209,  342,  117,  170,  247,  420,  323,
 /*  2800 */   420,  420,  326,  276,  456,  144,  100,  154,  202,  201,
 /*  2810 */   167,  352,  183,  187,  403,   86,  151,  266,  327,  375,
 /*  2820 */   394,  131,  375,  123,  386,  169,  352,  183,  187,  403,
 /*  2830 */    86,  151,  266,  255,  108,  375,  420,  455,  134,  170,
 /*  2840 */   247,  420,  170,  247,  420,  420,  420,  255,  420,  420,
 /*  2850 */   420,  283,  209,  342,  117,  420,  170,  247,  323,  420,
 /*  2860 */   420,  326,  276,  456,  144,  100,  154,  202,  201,  167,
 /*  2870 */   352,  183,  187,  403,   86,  151,  266,  313,  375,  394,
 /*  2880 */   131,  375,  123,  386,  400,  183,  187,  403,   86,  151,
 /*  2890 */   266,  420,  255,  108,  420,  375,  285,  134,  170,  247,
 /*  2900 */   420,  170,  247,  420,  420,  420,  420,  420,  420,  420,
 /*  2910 */   420,  209,  342,  117,  420,  420,  420,  323,  420,  420,
 /*  2920 */   326,  276,  456,  144,  100,  154,  202,  201,  167,  352,
 /*  2930 */   183,  187,  403,   86,  151,  266,  220,  375,  394,  131,
 /*  2940 */   375,  123,  386,  420,  420,  420,  420,  420,  420,  420,
 /*  2950 */   420,  255,  108,  420,  420,  280,  134,  170,  247,  420,
 /*  2960 */   170,  247,  420,  420,  420,  420,  255,  420,  420,  420,
 /*  2970 */   209,  342,  117,  420,  420,  420,  323,  420,  420,  326,
 /*  2980 */   276,  456,  144,  100,  154,  202,  201,  167,  352,  183,
 /*  2990 */   187,  403,   86,  151,  266,  329,  375,  394,  131,  375,
 /*  3000 */   123,  386,  165,  352,  183,  187,  403,   86,  151,  266,
 /*  3010 */   255,  108,  420,  420,  420,  134,  170,  247,  420,  420,
 /*  3020 */   420,  420,  420,  420,  420,  420,  420,  420,  255,  209,
 /*  3030 */   342,  117,  420,  420,  420,  323,  420,  420,  326,  276,
 /*  3040 */   456,  144,  100,  154,  202,  201,  167,  352,  183,  187,
 /*  3050 */   403,   86,  151,  266,  420,  375,  255,  108,  420,  420,
 /*  3060 */   420,  134,  170,  247,  420,  361,  183,  187,  403,   86,
 /*  3070 */   151,  266,  420,  420,  420,  242,  420,  255,  420,  420,
 /*  3080 */   239,  420,  420,  420,  420,  420,  456,  144,  100,  154,
 /*  3090 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*  3100 */   420,  375,  420,  420,  420,  420,  255,  108,  420,  420,
 /*  3110 */   420,  134,  170,  247,  360,  183,  187,  403,   86,  151,
 /*  3120 */   266,  420,  420,  420,  420,  196,  420,  255,  420,  420,
 /*  3130 */   420,  420,  420,  420,  420,  420,  456,  144,  100,  154,
 /*  3140 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*  3150 */   420,  375,  255,  108,  420,  420,  420,  134,  170,  247,
 /*  3160 */   157,  202,  201,  167,  352,  183,  187,  403,   86,  151,
 /*  3170 */   266,  193,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  3180 */   420,  420,  456,  144,  100,  154,  202,  201,  167,  352,
 /*  3190 */   183,  187,  403,   86,  151,  266,  420,  375,  255,  108,
 /*  3200 */   420,  420,  420,  134,  170,  247,  420,  420,  420,  420,
 /*  3210 */   420,  420,  420,  420,  420,  420,  420,  181,  420,  420,
 /*  3220 */   420,  420,  255,  420,  420,  420,  420,  420,  456,  144,
 /*  3230 */   100,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*  3240 */   151,  266,  420,  375,  420,  420,  420,  255,  107,  420,
 /*  3250 */   420,  420,  134,  170,  247,  159,  202,  201,  167,  352,
 /*  3260 */   183,  187,  403,   86,  151,  266,  181,  420,  420,  420,
 /*  3270 */   420,  420,  420,  420,  420,  420,  420,  456,  144,  100,
 /*  3280 */   154,  202,  201,  167,  352,  183,  187,  403,   86,  151,
 /*  3290 */   266,  420,  375,  255,  108,  420,  420,  420,  134,  170,
 /*  3300 */   247,  420,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  3310 */   420,  420,  178,  420,  420,  420,  420,  420,  420,  420,
 /*  3320 */   420,  420,  420,  456,  144,  100,  154,  202,  201,  167,
 /*  3330 */   352,  183,  187,  403,   86,  151,  266,  420,  375,  255,
 /*  3340 */   108,  420,  420,  420,  134,  170,  247,  420,  420,  420,
 /*  3350 */   420,  420,  420,  420,  420,  420,  420,  420,  197,  420,
 /*  3360 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  456,
 /*  3370 */   144,  100,  154,  202,  201,  167,  352,  183,  187,  403,
 /*  3380 */    86,  151,  266,  420,  375,  420,  420,  420,  255,  108,
 /*  3390 */   420,  420,  420,  134,  170,  247,  420,  420,  420,  420,
 /*  3400 */   420,  420,  420,  420,  420,  420,  420,  176,  420,  420,
 /*  3410 */   420,  420,  420,  420,  420,  420,  420,  420,  456,  144,
 /*  3420 */   100,  154,  202,  201,  167,  352,  183,  187,  403,   86,
 /*  3430 */   151,  266,  420,  375,  255,  108,  420,  420,  420,  134,
 /*  3440 */   170,  247,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  3450 */   420,  420,  420,  191,  420,  420,  420,  420,  420,  420,
 /*  3460 */   420,  420,  420,  420,  456,  144,  100,  154,  202,  201,
 /*  3470 */   167,  352,  183,  187,  403,   86,  151,  266,  420,  375,
 /*  3480 */   255,  108,  420,  420,  420,  134,  170,  247,  420,  420,
 /*  3490 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  208,
 /*  3500 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  3510 */   456,  144,  100,  154,  202,  201,  167,  352,  183,  187,
 /*  3520 */   403,   86,  151,  266,  420,  375,  420,  420,  420,  255,
 /*  3530 */   108,  420,  420,  420,  134,  170,  247,  420,  420,  420,
 /*  3540 */   420,  420,  420,  420,  420,  420,  420,  420,  192,  420,
 /*  3550 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  456,
 /*  3560 */   144,  100,  154,  202,  201,  167,  352,  183,  187,  403,
 /*  3570 */    86,  151,  266,  420,  375,  255,  108,  420,  420,  420,
 /*  3580 */   134,  170,  247,  420,  420,  173,  420,  420,  420,  420,
 /*  3590 */   420,  420,  420,  420,  171,  420,  420,  420,  420,  420,
 /*  3600 */   420,   39,  460,  420,  272,  456,  144,  100,  154,  202,
 /*  3610 */   201,  167,  352,  183,  187,  403,   86,  151,  266,  420,
 /*  3620 */   375,  255,  108,  420,  420,  410,  134,  170,  247,  420,
 /*  3630 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  3640 */   175,   33,  420,   88,  236,  420,  420,  420,  420,  420,
 /*  3650 */   420,  456,  144,  100,  154,  202,  201,  167,  352,  183,
 /*  3660 */   187,  403,   86,  151,  266,  420,  375,  420,  420,  420,
 /*  3670 */   420,  410,  409,  412,  411,  288,  420,  289,  420,  420,
 /*  3680 */   420,  420,  420,  420,  420,  420,  420,   33,  420,   88,
 /*  3690 */   420,  420,  420,  420,  420,  255,  420,   92,   91,  420,
 /*  3700 */   420,   83,   85,   87,   82,   84,  420,  410,  245,  290,
 /*  3710 */   240,  277,  409,  412,  411,  288,  420,  289,  420,  420,
 /*  3720 */   420,  270,  420,   33,  420,   88,  147,  420,  154,  202,
 /*  3730 */   201,  167,  352,  183,  187,  403,   86,  151,  266,  420,
 /*  3740 */   420,  420,  420,   92,   91,  420,  420,   83,   85,   87,
 /*  3750 */    82,   84,  420,  420,  245,  290,  240,  277,  409,  412,
 /*  3760 */   411,  288,  420,  289,  420,  420,  420,  420,  420,  420,
 /*  3770 */   420,  420,  420,  420,  420,  420,  255,  420,  420,   92,
 /*  3780 */    91,  420,  420,   83,   85,   87,   82,   84,  255,  420,
 /*  3790 */   245,  290,  240,  277,  409,  412,  411,  288,  420,  289,
 /*  3800 */   255,  420,  420,  420,  420,  420,  420,  146,  420,  154,
 /*  3810 */   202,  201,  167,  352,  183,  187,  403,   86,  151,  266,
 /*  3820 */   420,  160,  202,  201,  167,  352,  183,  187,  403,   86,
 /*  3830 */   151,  266,  420,  152,  202,  201,  167,  352,  183,  187,
 /*  3840 */   403,   86,  151,  266,  255,  420,  420,  420,  420,  163,
 /*  3850 */   420,  420,  420,  420,  420,  420,  420,  255,  420,  420,
 /*  3860 */   420,  420,  420,  420,  420,   32,  420,  255,  272,  420,
 /*  3870 */   420,  420,  420,  422,  420,  420,  420,  158,  202,  201,
 /*  3880 */   167,  352,  183,  187,  403,   86,  151,  266,  420,  420,
 /*  3890 */   255,  185,  201,  167,  352,  183,  187,  403,   86,  151,
 /*  3900 */   266,  212,  201,  167,  352,  183,  187,  403,   86,  151,
 /*  3910 */   266,  420,  255,  420,  420,  420,  420,  420,  420,  420,
 /*  3920 */   420,  255,  420,  420,  180,  201,  167,  352,  183,  187,
 /*  3930 */   403,   86,  151,  266,  420,  255,  409,  412,  411,  288,
 /*  3940 */   420,  289,  420,  420,  420,  420,  179,  201,  167,  352,
 /*  3950 */   183,  187,  403,   86,  151,  266,  184,  167,  352,  183,
 /*  3960 */   187,  403,   86,  151,  266,  420,  420,  420,  420,  420,
 /*  3970 */   188,  167,  352,  183,  187,  403,   86,  151,  266,
    );
    static public $yy_lookahead = array(
 /*     0 */    18,   19,   20,   21,   22,   23,   24,   25,   22,   27,
 /*    10 */    28,   29,  141,  142,   32,   89,   90,   35,   22,   37,
 /*    20 */    38,   39,   23,   24,   25,   40,   44,   26,  135,   33,
 /*    30 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*    40 */    58,   21,   45,   61,   34,   35,   64,   65,   66,   67,
 /*    50 */    68,  180,   33,   71,   72,   73,   74,   75,  165,  166,
 /*    60 */    41,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*    70 */   177,  178,   21,   91,   92,   40,   41,   95,   96,   97,
 /*    80 */    98,   99,   62,   63,  102,  103,  104,  105,  106,  107,
 /*    90 */   108,  109,   35,  111,  112,  113,  114,  115,   18,   19,
 /*   100 */    20,   21,   22,   23,   24,   25,   19,   27,   28,   29,
 /*   110 */    40,  110,   32,   62,   63,   35,   35,   37,   38,   39,
 /*   120 */   110,   19,   87,   88,   44,   38,  135,   12,   48,   49,
 /*   130 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   37,
 /*   140 */    38,   61,   34,   35,   64,   65,   66,   67,   68,   34,
 /*   150 */    36,   71,   72,   73,   74,   75,  165,  166,   12,  168,
 /*   160 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*   170 */    33,   91,   92,   36,   35,   95,   96,   97,   98,   99,
 /*   180 */    34,   35,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   190 */    36,  111,  112,  113,  114,  115,   18,   19,   20,   22,
 /*   200 */    22,   23,   24,   25,   33,    3,    4,    5,    6,    7,
 /*   210 */    32,    9,   41,   35,   44,   37,   38,   39,   93,   94,
 /*   220 */    95,  135,   44,   45,   46,   47,   48,   49,   50,   51,
 /*   230 */    52,   53,   54,   55,   56,   57,   58,   33,   33,   61,
 /*   240 */    36,   36,   64,   65,   66,   67,   68,   91,   92,   71,
 /*   250 */    72,   73,   74,   75,  168,  169,  170,  171,  172,  173,
 /*   260 */   174,  175,  176,  177,  178,   95,   96,  135,   22,   91,
 /*   270 */    92,   19,   20,   95,   96,   97,   98,   99,   34,   33,
 /*   280 */   102,  103,  104,  105,  106,  107,  108,  109,   86,  111,
 /*   290 */   112,  113,  114,  115,   18,   19,   20,   21,   22,   23,
 /*   300 */    24,   25,  143,  144,  145,  173,  174,   35,   32,  177,
 /*   310 */   178,   35,   26,   37,   38,   39,   30,   31,   19,   22,
 /*   320 */    44,   22,  135,   12,   48,   49,   50,   51,   52,   53,
 /*   330 */    54,   55,   56,   57,   58,   19,   19,   61,   22,   22,
 /*   340 */    64,   65,   66,   67,   68,   34,   35,   71,   72,   73,
 /*   350 */    74,   75,  165,  166,  110,  168,  169,  170,  171,  172,
 /*   360 */   173,  174,  175,  176,  177,  178,   33,   91,   92,   36,
 /*   370 */   135,   95,   96,   97,   98,   99,   19,  142,  102,  103,
 /*   380 */   104,  105,  106,  107,  108,  109,   19,  111,  112,  113,
 /*   390 */   114,  115,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   400 */    52,  135,   21,  137,   26,   38,   32,   35,  142,   35,
 /*   410 */    22,   37,   38,   39,   33,   19,   44,  113,   44,  115,
 /*   420 */   135,   33,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   430 */    56,   57,   58,   37,   38,   61,   34,   19,   64,   65,
 /*   440 */    66,   67,   68,   19,   20,   71,   72,   73,   74,   75,
 /*   450 */   165,  166,   95,  168,  169,  170,  171,  172,  173,  174,
 /*   460 */   175,  176,  177,  178,   22,   91,   92,   95,   96,   95,
 /*   470 */    96,   97,   98,   99,   22,   33,  102,  103,  104,  105,
 /*   480 */   106,  107,  108,  109,   38,  111,  112,  113,  114,  115,
 /*   490 */    18,   19,   20,   21,   22,   23,   24,   25,  113,   33,
 /*   500 */   115,   44,   36,   33,   32,   19,   36,   35,   22,   37,
 /*   510 */    38,   39,  110,   95,   35,   20,   44,   22,  135,   12,
 /*   520 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   530 */    58,   33,   33,   61,   36,   36,   64,   65,   66,   67,
 /*   540 */    68,   34,  138,   71,   72,   73,   74,   75,  165,  166,
 /*   550 */   146,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*   560 */   177,  178,   35,   91,   92,   33,   12,   95,   96,   97,
 /*   570 */    98,   99,   34,   41,  102,  103,  104,  105,  106,  107,
 /*   580 */   108,  109,   36,  111,  112,  113,  114,  115,   18,   19,
 /*   590 */    20,   21,   22,   23,   24,   25,   19,   33,  133,  134,
 /*   600 */    36,   20,   32,   22,   20,   35,   22,   37,   38,   39,
 /*   610 */    19,  157,  158,   20,   44,   38,  135,   19,   48,   49,
 /*   620 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   38,
 /*   630 */    35,   61,  138,   20,   64,   65,   66,   67,   68,   20,
 /*   640 */   146,   71,   72,   73,   74,   75,  165,  166,   19,  168,
 /*   650 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*   660 */    22,   91,   92,  144,  145,   95,   96,   97,   98,   99,
 /*   670 */   161,  162,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   680 */    40,  111,  112,  113,  114,  115,   18,   19,   20,   21,
 /*   690 */    22,   23,   24,   25,  137,  110,  138,  137,    2,  142,
 /*   700 */    32,   35,  142,   35,  146,   37,   38,   39,  152,  153,
 /*   710 */    46,   47,   44,   19,  135,   21,   48,   49,   50,   51,
 /*   720 */    52,   53,   54,   55,   56,   57,   58,   22,   41,   61,
 /*   730 */   138,   22,   64,   65,   66,   67,   68,   70,  146,   71,
 /*   740 */    72,   73,   74,   75,  165,  166,  113,  168,  169,  170,
 /*   750 */   171,  172,  173,  174,  175,  176,  177,  178,   41,   91,
 /*   760 */    92,   40,   19,   95,   96,   97,   98,   99,   34,   22,
 /*   770 */   102,  103,  104,  105,  106,  107,  108,  109,   40,  111,
 /*   780 */   112,  113,  114,  115,   18,   19,   20,   21,   22,   23,
 /*   790 */    24,   25,  137,   35,   70,   36,   19,  142,   32,   19,
 /*   800 */    22,   35,   41,   37,   38,   39,   36,   36,  113,   12,
 /*   810 */    44,   38,  135,  113,   48,   49,   50,   51,   52,   53,
 /*   820 */    54,   55,   56,   57,   58,   22,   26,   61,  115,   41,
 /*   830 */    64,   65,   66,   67,   68,   26,   95,   71,   72,   73,
 /*   840 */    74,   75,  165,  166,   40,  168,  169,  170,  171,  172,
 /*   850 */   173,  174,  175,  176,  177,  178,   19,   91,   92,   35,
 /*   860 */    19,   95,   96,   97,   98,   99,   36,   35,  102,  103,
 /*   870 */   104,  105,  106,  107,  108,  109,   19,  111,  112,  113,
 /*   880 */   114,  115,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   890 */    35,   12,   38,   19,   36,   19,   32,  132,   33,   35,
 /*   900 */    40,   37,   38,   39,   35,  131,  139,  139,   44,  124,
 /*   910 */   135,  139,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   920 */    56,   57,   58,  132,  162,   61,  139,  135,   64,   65,
 /*   930 */    66,   67,   68,  126,  139,   71,   72,   73,   74,   75,
 /*   940 */   165,  166,   19,  168,  169,  170,  171,  172,  173,  174,
 /*   950 */   175,  176,  177,  178,  142,   91,   92,  135,  139,   95,
 /*   960 */    96,   97,   98,   99,  139,   20,  102,  103,  104,  105,
 /*   970 */   106,  107,  108,  109,  139,  111,  112,  113,  114,  115,
 /*   980 */    18,   19,   20,   21,   22,   23,   24,   25,  139,  121,
 /*   990 */    59,  158,  139,  134,   32,  124,  181,   35,  181,   37,
 /*  1000 */    38,   39,  181,  181,  181,  181,   44,  181,  135,  181,
 /*  1010 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1020 */    58,  181,  181,   61,  181,  181,   64,   65,   66,   67,
 /*  1030 */    68,  181,  181,   71,   72,   73,   74,   75,  165,  166,
 /*  1040 */   181,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  1050 */   177,  178,  181,   91,   92,  181,  181,   95,   96,   97,
 /*  1060 */    98,   99,  181,  181,  102,  103,  104,  105,  106,  107,
 /*  1070 */   108,  109,  181,  111,  112,  113,  114,  115,   18,   19,
 /*  1080 */    20,   21,   22,   23,   24,   25,  181,  181,  181,  181,
 /*  1090 */   181,  181,   32,  181,  181,   35,  181,   37,   38,   39,
 /*  1100 */   181,  181,  181,  181,   44,  181,  135,  181,   48,   49,
 /*  1110 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  181,
 /*  1120 */   181,   61,  181,  181,   64,   65,   66,   67,   68,  181,
 /*  1130 */   181,   71,   72,   73,   74,   75,  165,  166,  181,  168,
 /*  1140 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  1150 */   181,   91,   92,  181,  181,   95,   96,   97,   98,   99,
 /*  1160 */    19,  181,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1170 */   181,  111,  112,  113,  114,  115,   18,   19,   20,   38,
 /*  1180 */    22,   23,   24,   25,   43,  181,  181,  181,  181,  181,
 /*  1190 */    32,  181,  181,   35,  181,   37,   38,   39,  181,  181,
 /*  1200 */   181,  181,   44,  181,  135,  181,   48,   49,   50,   51,
 /*  1210 */    52,   53,   54,   55,   56,   57,   58,  181,  181,   61,
 /*  1220 */   181,  181,   64,   65,   66,   67,   68,  181,  181,   71,
 /*  1230 */    72,   73,   74,   75,  165,  166,  181,  168,  169,  170,
 /*  1240 */   171,  172,  173,  174,  175,  176,  177,  178,  181,   91,
 /*  1250 */    92,  181,  181,   95,   96,   97,   98,   99,   19,  181,
 /*  1260 */   102,  103,  104,  105,  106,  107,  108,  109,  181,  111,
 /*  1270 */   112,  113,  114,  115,   18,   19,   20,   38,   22,   23,
 /*  1280 */    24,   25,   43,  181,  181,  181,  181,   23,   24,  181,
 /*  1290 */   181,   35,  181,   37,   38,   39,   32,  181,  181,  181,
 /*  1300 */    44,  181,  135,  181,  181,   41,   42,   51,   52,   53,
 /*  1310 */    54,   55,   56,   57,   58,  181,  181,   61,  181,  181,
 /*  1320 */    64,   65,   66,   67,   68,  181,  181,   71,   72,   73,
 /*  1330 */    74,   75,  165,  166,  181,  168,  169,  170,  171,  172,
 /*  1340 */   173,  174,  175,  176,  177,  178,  181,   91,   92,  181,
 /*  1350 */   181,   95,   96,   97,   98,   99,  181,  181,  102,  103,
 /*  1360 */   104,  105,  106,  107,  108,  109,  181,  111,  112,  113,
 /*  1370 */   114,  115,   38,  119,  120,   41,  122,  123,   44,  125,
 /*  1380 */   126,  127,  128,  129,  130,   36,  181,   38,  181,  135,
 /*  1390 */   136,  181,  181,   44,  140,  141,  142,  181,  181,  181,
 /*  1400 */   181,  136,  181,  149,  181,  181,  141,  142,  154,  155,
 /*  1410 */   156,  181,  147,  148,  160,  181,  181,  163,  164,  165,
 /*  1420 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  1430 */   176,  177,  178,  181,  180,  181,  181,  119,  120,  181,
 /*  1440 */   122,  123,  181,  125,  126,  180,  112,  113,  114,  115,
 /*  1450 */   181,  181,  181,  135,  136,  181,   38,  181,  140,  141,
 /*  1460 */   142,  112,  113,  114,  115,  181,  181,  149,  150,  151,
 /*  1470 */   152,  153,  154,  155,  156,  135,  181,  181,  160,  181,
 /*  1480 */   181,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  1490 */   172,  173,  174,  175,  176,  177,  178,  181,  180,  119,
 /*  1500 */   120,   38,  122,  123,  181,  125,  126,   44,  128,  129,
 /*  1510 */   130,  181,  181,  173,  174,  135,  136,  177,  178,  181,
 /*  1520 */   140,  141,  142,  181,  181,   35,  181,  181,  181,  149,
 /*  1530 */   112,  113,  114,  115,  154,  155,  156,  181,  181,  181,
 /*  1540 */   160,  181,  181,  163,  164,  165,  166,  167,  168,  169,
 /*  1550 */   170,  171,  172,  173,  174,  175,  176,  177,  178,   69,
 /*  1560 */   180,  117,  118,  119,  120,   19,  122,  123,  181,  125,
 /*  1570 */   126,  181,  181,   23,   24,  112,  113,  114,  115,  135,
 /*  1580 */   136,   35,   32,  181,  140,  141,  142,  126,   98,   99,
 /*  1590 */   100,  101,   42,  149,  181,  181,  181,  136,  154,  155,
 /*  1600 */   156,  140,  141,  142,  160,  181,  181,  163,  164,  165,
 /*  1610 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  1620 */   176,  177,  178,  181,  180,  118,  119,  120,  167,  122,
 /*  1630 */   123,  181,  125,  126,  181,  181,  181,  181,  181,  181,
 /*  1640 */   181,  180,  135,  136,  181,  181,  181,  140,  141,  142,
 /*  1650 */   181,  181,  106,  107,  108,  109,  149,  111,  181,  136,
 /*  1660 */   181,  154,  155,  156,  141,  142,  181,  160,  181,  181,
 /*  1670 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  1680 */   173,  174,  175,  176,  177,  178,  181,  180,  118,  119,
 /*  1690 */   120,  181,  122,  123,  181,  125,  126,  181,  181,  181,
 /*  1700 */   181,  181,  179,  180,  181,  135,  136,  181,  181,  181,
 /*  1710 */   140,  141,  142,  181,  181,  181,  181,  181,  181,  149,
 /*  1720 */   181,  181,  135,  181,  154,  155,  156,  181,  181,  181,
 /*  1730 */   160,  181,  181,  163,  164,  165,  166,  167,  168,  169,
 /*  1740 */   170,  171,  172,  173,  174,  175,  176,  177,  178,  181,
 /*  1750 */   180,  118,  119,  120,  181,  122,  123,  181,  125,  126,
 /*  1760 */   173,  174,  175,  176,  177,  178,  181,  181,  135,  136,
 /*  1770 */   181,  181,  181,  140,  141,  142,  181,  181,  181,  181,
 /*  1780 */   181,  181,  149,  181,  181,  135,  181,  154,  155,  156,
 /*  1790 */   181,  181,  181,  160,  181,  181,  163,  164,  165,  166,
 /*  1800 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  1810 */   177,  178,  181,  180,  118,  119,  120,  181,  122,  123,
 /*  1820 */   181,  125,  126,  173,  174,  175,  176,  177,  178,  181,
 /*  1830 */   181,  135,  136,  181,  181,  181,  140,  141,  142,  181,
 /*  1840 */   181,  181,  181,  181,  181,  149,  181,  181,  135,  181,
 /*  1850 */   154,  155,  156,  181,  181,  181,  160,  181,  181,  163,
 /*  1860 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  1870 */   174,  175,  176,  177,  178,  181,  180,  118,  119,  120,
 /*  1880 */   181,  122,  123,  181,  125,  126,  173,  174,  175,  176,
 /*  1890 */   177,  178,  181,  181,  135,  136,  181,  181,  181,  140,
 /*  1900 */   141,  142,  181,  181,  181,  181,  181,  181,  149,  181,
 /*  1910 */   181,  135,  181,  154,  155,  156,  181,  181,  181,  160,
 /*  1920 */   181,  181,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  1930 */   171,  172,  173,  174,  175,  176,  177,  178,  181,  180,
 /*  1940 */   118,  119,  120,  181,  122,  123,  181,  125,  126,  173,
 /*  1950 */   174,  175,  176,  177,  178,  181,  181,  135,  136,  181,
 /*  1960 */   181,  181,  140,  141,  142,  181,  181,  181,  181,  181,
 /*  1970 */   181,  149,  181,  181,  135,  181,  154,  155,  156,  181,
 /*  1980 */   181,  181,  160,  181,  181,  163,  164,  165,  166,  167,
 /*  1990 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  2000 */   178,  181,  180,  118,  119,  120,  181,  122,  123,  181,
 /*  2010 */   125,  126,  173,  174,  175,  176,  177,  178,  181,  181,
 /*  2020 */   135,  136,  181,  181,  181,  140,  141,  142,  181,  181,
 /*  2030 */   181,  181,  181,  181,  149,  181,  181,  135,  181,  154,
 /*  2040 */   155,  156,  181,  181,  181,  160,  181,  181,  163,  164,
 /*  2050 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2060 */   175,  176,  177,  178,  181,  180,  118,  119,  120,  181,
 /*  2070 */   122,  123,  181,  125,  126,  173,  174,  175,  176,  177,
 /*  2080 */   178,  181,  181,  135,  136,  181,  181,  181,  140,  141,
 /*  2090 */   142,  181,  181,  181,  181,  181,  181,  149,  181,  181,
 /*  2100 */   135,  181,  154,  155,  156,  181,  181,  181,  160,  181,
 /*  2110 */   181,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  2120 */   172,  173,  174,  175,  176,  177,  178,  181,  180,  118,
 /*  2130 */   119,  120,  181,  122,  123,  181,  125,  126,  173,  174,
 /*  2140 */   175,  176,  177,  178,  181,  181,  135,  136,  181,  181,
 /*  2150 */   181,  140,  141,  142,  181,  181,  181,  181,  136,  181,
 /*  2160 */   149,  181,  181,  141,  142,  154,  155,  156,  181,  181,
 /*  2170 */   181,  160,  181,  181,  163,  164,  165,  166,  167,  168,
 /*  2180 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  2190 */   181,  180,  118,  119,  120,  181,  122,  123,  181,  125,
 /*  2200 */   126,  179,  180,  181,  181,  181,  181,  181,  181,  135,
 /*  2210 */   136,   23,   24,   25,  140,  141,  142,  181,  181,  181,
 /*  2220 */   181,  181,  181,  149,  181,   37,   38,  181,  154,  155,
 /*  2230 */   156,  181,   44,  181,  160,  181,  181,  163,  164,  165,
 /*  2240 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  2250 */   176,  177,  178,  181,  180,  181,  181,   19,  181,   71,
 /*  2260 */    72,   73,   74,   75,  181,  181,  181,  181,  181,  181,
 /*  2270 */   181,  181,  181,   35,  136,   37,   38,  181,  136,  141,
 /*  2280 */   142,  181,   44,  141,  142,  181,    3,    4,    5,    6,
 /*  2290 */     7,  181,    9,  181,  181,  181,  181,  181,   60,  181,
 /*  2300 */   112,  113,  114,  115,  181,   67,   68,   19,  181,   71,
 /*  2310 */    72,   73,   74,   75,  136,  181,  181,   34,  180,  141,
 /*  2320 */   142,  181,  180,   35,  181,  181,  148,  181,  181,   91,
 /*  2330 */    92,  181,  181,   95,   96,   97,   98,   99,  181,  181,
 /*  2340 */   102,  103,  104,  105,  106,  107,  108,  109,  181,  111,
 /*  2350 */   112,  113,  114,  115,   19,  181,  181,  181,  180,   76,
 /*  2360 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*  2370 */    35,   36,   37,   38,  181,  181,  181,  181,  181,   44,
 /*  2380 */    38,  135,  181,   41,  181,   19,   44,  181,  181,  181,
 /*  2390 */   102,  103,  104,  105,  106,  107,  108,  109,  181,  111,
 /*  2400 */   181,   35,   67,   68,   38,  181,   71,   72,   73,   74,
 /*  2410 */    75,  165,  166,  181,  168,  169,  170,  171,  172,  173,
 /*  2420 */   174,  175,  176,  177,  178,  181,   91,   92,  181,  181,
 /*  2430 */    95,   96,   97,   98,   99,  181,  181,  102,  103,  104,
 /*  2440 */   105,  106,  107,  108,  109,  181,  111,  112,  113,  114,
 /*  2450 */   115,   19,  181,  135,  112,  113,  114,  115,  181,  181,
 /*  2460 */    19,  181,  181,  181,  181,  181,  181,   35,   36,   37,
 /*  2470 */    38,  181,  106,  107,  108,  109,   44,  111,  135,   38,
 /*  2480 */   181,  181,  181,  165,  166,   44,  168,  169,  170,  171,
 /*  2490 */   172,  173,  174,  175,  176,  177,  178,  181,  181,   67,
 /*  2500 */    68,  181,  181,   71,   72,   73,   74,   75,  165,  166,
 /*  2510 */   181,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  2520 */   177,  178,  181,   91,   92,  181,  181,   95,   96,   97,
 /*  2530 */    98,   99,  181,  181,  102,  103,  104,  105,  106,  107,
 /*  2540 */   108,  109,  181,  111,  112,  113,  114,  115,   19,  181,
 /*  2550 */   135,   22,  181,  112,  113,  114,  115,  181,  181,  181,
 /*  2560 */   181,  181,  181,  181,   35,  181,   37,   38,  181,  181,
 /*  2570 */   181,  181,  181,   44,  135,  181,  181,  181,  181,  181,
 /*  2580 */   181,  166,  181,  168,  169,  170,  171,  172,  173,  174,
 /*  2590 */   175,  176,  177,  178,  181,  181,   67,   68,  181,  181,
 /*  2600 */    71,   72,   73,   74,   75,  166,  181,  168,  169,  170,
 /*  2610 */   171,  172,  173,  174,  175,  176,  177,  178,  181,  181,
 /*  2620 */    91,   92,  181,  181,   95,   96,   97,   98,   99,  181,
 /*  2630 */   181,  102,  103,  104,  105,  106,  107,  108,  109,  181,
 /*  2640 */   111,  112,  113,  114,  115,  181,  181,  119,  120,  181,
 /*  2650 */   122,  123,  181,  125,  126,  181,  181,  181,  181,  181,
 /*  2660 */   181,  181,   19,  135,  136,  181,  181,  181,  140,  141,
 /*  2670 */   142,  181,  181,  181,  181,  181,  181,  149,   35,  181,
 /*  2680 */    37,   38,  154,  155,  156,  181,  135,   44,  160,  181,
 /*  2690 */   181,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  2700 */   172,  173,  174,  175,  176,  177,  178,  181,  180,  181,
 /*  2710 */    67,   68,  181,  181,   71,   72,   73,   74,   75,  168,
 /*  2720 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  2730 */   181,  181,  181,  181,   91,   92,  181,  181,   95,   96,
 /*  2740 */    97,   98,   99,  181,  181,  102,  103,  104,  105,  106,
 /*  2750 */   107,  108,  109,  181,  111,  112,  113,  114,  115,  120,
 /*  2760 */   181,  122,  123,  181,  125,  126,  181,  181,  181,  181,
 /*  2770 */   181,  181,  181,  181,  135,  136,  181,  181,  136,  140,
 /*  2780 */   141,  142,  181,  141,  142,  181,  181,  181,  181,  135,
 /*  2790 */   181,  136,  181,  154,  155,  156,  141,  142,  181,  160,
 /*  2800 */   181,  181,  163,  164,  165,  166,  167,  168,  169,  170,
 /*  2810 */   171,  172,  173,  174,  175,  176,  177,  178,  120,  180,
 /*  2820 */   122,  123,  180,  125,  126,  171,  172,  173,  174,  175,
 /*  2830 */   176,  177,  178,  135,  136,  180,  181,  136,  140,  141,
 /*  2840 */   142,  181,  141,  142,  181,  181,  181,  135,  181,  181,
 /*  2850 */   181,  136,  154,  155,  156,  181,  141,  142,  160,  181,
 /*  2860 */   181,  163,  164,  165,  166,  167,  168,  169,  170,  171,
 /*  2870 */   172,  173,  174,  175,  176,  177,  178,  120,  180,  122,
 /*  2880 */   123,  180,  125,  126,  172,  173,  174,  175,  176,  177,
 /*  2890 */   178,  181,  135,  136,  181,  180,  136,  140,  141,  142,
 /*  2900 */   181,  141,  142,  181,  181,  181,  181,  181,  181,  181,
 /*  2910 */   181,  154,  155,  156,  181,  181,  181,  160,  181,  181,
 /*  2920 */   163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  2930 */   173,  174,  175,  176,  177,  178,  120,  180,  122,  123,
 /*  2940 */   180,  125,  126,  181,  181,  181,  181,  181,  181,  181,
 /*  2950 */   181,  135,  136,  181,  181,  136,  140,  141,  142,  181,
 /*  2960 */   141,  142,  181,  181,  181,  181,  135,  181,  181,  181,
 /*  2970 */   154,  155,  156,  181,  181,  181,  160,  181,  181,  163,
 /*  2980 */   164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  2990 */   174,  175,  176,  177,  178,  120,  180,  122,  123,  180,
 /*  3000 */   125,  126,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  3010 */   135,  136,  181,  181,  181,  140,  141,  142,  181,  181,
 /*  3020 */   181,  181,  181,  181,  181,  181,  181,  181,  135,  154,
 /*  3030 */   155,  156,  181,  181,  181,  160,  181,  181,  163,  164,
 /*  3040 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3050 */   175,  176,  177,  178,  181,  180,  135,  136,  181,  181,
 /*  3060 */   181,  140,  141,  142,  181,  172,  173,  174,  175,  176,
 /*  3070 */   177,  178,  181,  181,  181,  154,  181,  135,  181,  181,
 /*  3080 */   159,  181,  181,  181,  181,  181,  165,  166,  167,  168,
 /*  3090 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  3100 */   181,  180,  181,  181,  181,  181,  135,  136,  181,  181,
 /*  3110 */   181,  140,  141,  142,  172,  173,  174,  175,  176,  177,
 /*  3120 */   178,  181,  181,  181,  181,  154,  181,  135,  181,  181,
 /*  3130 */   181,  181,  181,  181,  181,  181,  165,  166,  167,  168,
 /*  3140 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  3150 */   181,  180,  135,  136,  181,  181,  181,  140,  141,  142,
 /*  3160 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  3170 */   178,  154,  181,  181,  181,  181,  181,  181,  181,  181,
 /*  3180 */   181,  181,  165,  166,  167,  168,  169,  170,  171,  172,
 /*  3190 */   173,  174,  175,  176,  177,  178,  181,  180,  135,  136,
 /*  3200 */   181,  181,  181,  140,  141,  142,  181,  181,  181,  181,
 /*  3210 */   181,  181,  181,  181,  181,  181,  181,  154,  181,  181,
 /*  3220 */   181,  181,  135,  181,  181,  181,  181,  181,  165,  166,
 /*  3230 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3240 */   177,  178,  181,  180,  181,  181,  181,  135,  136,  181,
 /*  3250 */   181,  181,  140,  141,  142,  168,  169,  170,  171,  172,
 /*  3260 */   173,  174,  175,  176,  177,  178,  154,  181,  181,  181,
 /*  3270 */   181,  181,  181,  181,  181,  181,  181,  165,  166,  167,
 /*  3280 */   168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  3290 */   178,  181,  180,  135,  136,  181,  181,  181,  140,  141,
 /*  3300 */   142,  181,  181,  181,  181,  181,  181,  181,  181,  181,
 /*  3310 */   181,  181,  154,  181,  181,  181,  181,  181,  181,  181,
 /*  3320 */   181,  181,  181,  165,  166,  167,  168,  169,  170,  171,
 /*  3330 */   172,  173,  174,  175,  176,  177,  178,  181,  180,  135,
 /*  3340 */   136,  181,  181,  181,  140,  141,  142,  181,  181,  181,
 /*  3350 */   181,  181,  181,  181,  181,  181,  181,  181,  154,  181,
 /*  3360 */   181,  181,  181,  181,  181,  181,  181,  181,  181,  165,
 /*  3370 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  3380 */   176,  177,  178,  181,  180,  181,  181,  181,  135,  136,
 /*  3390 */   181,  181,  181,  140,  141,  142,  181,  181,  181,  181,
 /*  3400 */   181,  181,  181,  181,  181,  181,  181,  154,  181,  181,
 /*  3410 */   181,  181,  181,  181,  181,  181,  181,  181,  165,  166,
 /*  3420 */   167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3430 */   177,  178,  181,  180,  135,  136,  181,  181,  181,  140,
 /*  3440 */   141,  142,  181,  181,  181,  181,  181,  181,  181,  181,
 /*  3450 */   181,  181,  181,  154,  181,  181,  181,  181,  181,  181,
 /*  3460 */   181,  181,  181,  181,  165,  166,  167,  168,  169,  170,
 /*  3470 */   171,  172,  173,  174,  175,  176,  177,  178,  181,  180,
 /*  3480 */   135,  136,  181,  181,  181,  140,  141,  142,  181,  181,
 /*  3490 */   181,  181,  181,  181,  181,  181,  181,  181,  181,  154,
 /*  3500 */   181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
 /*  3510 */   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  3520 */   175,  176,  177,  178,  181,  180,  181,  181,  181,  135,
 /*  3530 */   136,  181,  181,  181,  140,  141,  142,  181,  181,  181,
 /*  3540 */   181,  181,  181,  181,  181,  181,  181,  181,  154,  181,
 /*  3550 */   181,  181,  181,  181,  181,  181,  181,  181,  181,  165,
 /*  3560 */   166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
 /*  3570 */   176,  177,  178,  181,  180,  135,  136,  181,  181,  181,
 /*  3580 */   140,  141,  142,  181,  181,   19,  181,  181,  181,  181,
 /*  3590 */   181,  181,  181,  181,  154,  181,  181,  181,  181,  181,
 /*  3600 */   181,   35,   36,  181,   38,  165,  166,  167,  168,  169,
 /*  3610 */   170,  171,  172,  173,  174,  175,  176,  177,  178,  181,
 /*  3620 */   180,  135,  136,  181,  181,   19,  140,  141,  142,  181,
 /*  3630 */   181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
 /*  3640 */   154,   35,  181,   37,   38,  181,  181,  181,  181,  181,
 /*  3650 */   181,  165,  166,  167,  168,  169,  170,  171,  172,  173,
 /*  3660 */   174,  175,  176,  177,  178,  181,  180,  181,  181,  181,
 /*  3670 */   181,   19,  106,  107,  108,  109,  181,  111,  181,  181,
 /*  3680 */   181,  181,  181,  181,  181,  181,  181,   35,  181,   37,
 /*  3690 */   181,  181,  181,  181,  181,  135,  181,   91,   92,  181,
 /*  3700 */   181,   95,   96,   97,   98,   99,  181,   19,  102,  103,
 /*  3710 */   104,  105,  106,  107,  108,  109,  181,  111,  181,  181,
 /*  3720 */   181,   69,  181,   35,  181,   37,  166,  181,  168,  169,
 /*  3730 */   170,  171,  172,  173,  174,  175,  176,  177,  178,  181,
 /*  3740 */   181,  181,  181,   91,   92,  181,  181,   95,   96,   97,
 /*  3750 */    98,   99,  181,  181,  102,  103,  104,  105,  106,  107,
 /*  3760 */   108,  109,  181,  111,  181,  181,  181,  181,  181,  181,
 /*  3770 */   181,  181,  181,  181,  181,  181,  135,  181,  181,   91,
 /*  3780 */    92,  181,  181,   95,   96,   97,   98,   99,  135,  181,
 /*  3790 */   102,  103,  104,  105,  106,  107,  108,  109,  181,  111,
 /*  3800 */   135,  181,  181,  181,  181,  181,  181,  166,  181,  168,
 /*  3810 */   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
 /*  3820 */   181,  168,  169,  170,  171,  172,  173,  174,  175,  176,
 /*  3830 */   177,  178,  181,  168,  169,  170,  171,  172,  173,  174,
 /*  3840 */   175,  176,  177,  178,  135,  181,  181,  181,  181,   19,
 /*  3850 */   181,  181,  181,  181,  181,  181,  181,  135,  181,  181,
 /*  3860 */   181,  181,  181,  181,  181,   35,  181,  135,   38,  181,
 /*  3870 */   181,  181,  181,   43,  181,  181,  181,  168,  169,  170,
 /*  3880 */   171,  172,  173,  174,  175,  176,  177,  178,  181,  181,
 /*  3890 */   135,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  3900 */   178,  169,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  3910 */   178,  181,  135,  181,  181,  181,  181,  181,  181,  181,
 /*  3920 */   181,  135,  181,  181,  169,  170,  171,  172,  173,  174,
 /*  3930 */   175,  176,  177,  178,  181,  135,  106,  107,  108,  109,
 /*  3940 */   181,  111,  181,  181,  181,  181,  169,  170,  171,  172,
 /*  3950 */   173,  174,  175,  176,  177,  178,  170,  171,  172,  173,
 /*  3960 */   174,  175,  176,  177,  178,  181,  181,  181,  181,  181,
 /*  3970 */   170,  171,  172,  173,  174,  175,  176,  177,  178,
);
    const YY_SHIFT_USE_DFLT = -75;
    const YY_SHIFT_MAX = 292;
    static public $yy_shift_ofst = array(
 /*     0 */  1158,  -18,  178,   80,  668,  570,  276,  374, 1158, 1158,
 /*    10 */  1158, 1158, 1158, 1158, 1060,  962,  766,  472,  864, 1158,
 /*    20 */  1158, 1158, 1158, 1158, 1256, 1256, 1256, 1256, 1256, 2238,
 /*    30 */  2529, 2335, 2432, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
 /*    40 */  2643, 2643, 2643, 3652, 3688, 3688, 3688, 3688, 3688, 3688,
 /*    50 */  3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688,
 /*    60 */  3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688,
 /*    70 */  3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688,
 /*    80 */  3688, 3606, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 2188,
 /*    90 */  1349, 2288, 2288, 1334, 2342, 1463, 2441, 1463, 1463, 1463,
 /*   100 */  1463, 1463, 1463, 1463, 3830, 1418, 1264, 3566, 2366, 1550,
 /*   110 */    51, 1141, 1239, 1141,  664,  694,  869,  931,  869,  869,
 /*   120 */   869, 1546, 1546,   -1,  286,   20,  495,  495,  495,  581,
 /*   130 */   495,  424,  495,  495,  591,  495,  495,  252,  584,  495,
 /*   140 */   495,  923,  945,  931, 2283,  202,  202,  202,  202, 1490,
 /*   150 */  1490, 1490,   35,  372,   35,   35,   35,   35,   35,   35,
 /*   160 */    35,  311,  170,   10,  102,  125,  396,  125,  146,  125,
 /*   170 */   170,  205,  115,  244,  507,  204,  137,    1,  564,  -74,
 /*   180 */   -74,  498,  402,  357,  156,  -74,  577,  418,  156,  486,
 /*   190 */   532,  388,  470,  466,  299,  316,  246,   -4,  381,   87,
 /*   200 */   317,  156,  -74,  385,   19,  367,  333,  304,  499,  442,
 /*   210 */   108,  171,  -74,  554,  595,  457,  446,  593,  479,  452,
 /*   220 */   348,  272,  297,  378,  527,  613,  619,  629,  598,  546,
 /*   230 */   177,  638,   57,  -14,   -3,   70,  139,   81,  114,  154,
 /*   240 */   -15,  538,  865,  741,  788,  804,  585,  797,  860,  809,
 /*   250 */   713,  700,  773,  803,  800,  585,  837,  824,  854,  858,
 /*   260 */   874,  876,  879,  855,  830,  841,  832,  857,  797,  771,
 /*   270 */   667,  633,  721,  743,  717,  709,  696,  640,  666,  705,
 /*   280 */   687,  734,  747,  761,  780,  770,  695,  778,  777,  758,
 /*   290 */   738,  759,  724,
);
    const YY_REDUCE_USE_DFLT = -130;
    const YY_REDUCE_MAX = 143;
    static public $yy_reduce_ofst = array(
 /*     0 */  1444, 1254, 1318, 1380, 1822, 1759, 1696, 1570, 1633, 1885,
 /*    10 */  1948, 1507, 2011, 2074, 2528, 2528, 2528, 2528, 2528, 2528,
 /*    20 */  2528, 2528, 2528, 2528, 2757, 2875, 2698, 2816, 2639, 2921,
 /*    30 */  3299, 3158, 3063, 3112, 3486, 3253, 3345, 3394, 3440, 3063,
 /*    40 */  3017, 2971, 3204,  383,  481,  873,  187,  677,  775, -107,
 /*    50 */    -9,  579, 2318,  971, 1069, 1167, 2343, 2246,  285, 2439,
 /*    60 */  2415, 3641, 3560, 3087, 3653, 2551,   86, 2992, 3709, 3665,
 /*    70 */  3755, 3732, 3722, 3777, 3786, 3800, 2654, 2831, 2712, 2893,
 /*    80 */  2942, 1902, 1650, 1713, 1587, 1839, 1776, 1965, 1902, 1461,
 /*    90 */  1265,  132, 1340, 1523, 2022, 2178, 2760, 2819, 2715, 2655,
 /*   100 */  2701, 2142, 2138, 2642,  266, -129,  159,  235,  235,  519,
 /*   110 */   509,  557,  560,  655,  556,  465,  592,  454,  494,  558,
 /*   120 */   404,  822,  792,  807,  774,  762,  849,  819,  787,  791,
 /*   130 */   768,  871,  853,  767,  812,  835,  825,  765,  785,  795,
 /*   140 */   772,  859,  868,  833,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 1 */ array(18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 2 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 3 */ array(18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 4 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 5 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 6 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 7 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 8 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 9 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 10 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 11 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 12 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 13 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 14 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 15 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 16 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 17 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 18 */ array(18, 19, 20, 21, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 19 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 20 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 21 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 22 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 23 */ array(18, 19, 20, 22, 23, 24, 25, 32, 35, 37, 38, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 24 */ array(18, 19, 20, 22, 23, 24, 25, 35, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 25 */ array(18, 19, 20, 22, 23, 24, 25, 35, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 26 */ array(18, 19, 20, 22, 23, 24, 25, 35, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 27 */ array(18, 19, 20, 22, 23, 24, 25, 35, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 28 */ array(18, 19, 20, 22, 23, 24, 25, 35, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 29 */ array(19, 35, 37, 38, 44, 60, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 30 */ array(19, 22, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 31 */ array(19, 35, 36, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 32 */ array(19, 35, 36, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 33 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 34 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 35 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 36 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 37 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 38 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 39 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 40 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 41 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 42 */ array(19, 35, 37, 38, 44, 67, 68, 71, 72, 73, 74, 75, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, ),
        /* 43 */ array(19, 35, 37, 69, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 44 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 45 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 46 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 47 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 48 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 49 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 50 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 51 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 52 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 53 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 54 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 55 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 56 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 57 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 58 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 59 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 60 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 61 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 62 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 63 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 64 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 65 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 66 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 67 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 68 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 69 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 70 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 71 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 72 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 73 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 74 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 75 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 76 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 77 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 78 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 79 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 80 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 81 */ array(19, 35, 37, 38, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 82 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 83 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 84 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 85 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 86 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 87 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 88 */ array(19, 35, 37, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 89 */ array(23, 24, 25, 37, 38, 44, 71, 72, 73, 74, 75, 112, 113, 114, 115, ),
        /* 90 */ array(36, 38, 44, 112, 113, 114, 115, ),
        /* 91 */ array(19, 35, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 92 */ array(19, 35, 102, 103, 104, 105, 106, 107, 108, 109, 111, ),
        /* 93 */ array(38, 41, 44, 112, 113, 114, 115, ),
        /* 94 */ array(38, 41, 44, 112, 113, 114, 115, ),
        /* 95 */ array(38, 44, 112, 113, 114, 115, ),
        /* 96 */ array(19, 38, 44, 112, 113, 114, 115, ),
        /* 97 */ array(38, 44, 112, 113, 114, 115, ),
        /* 98 */ array(38, 44, 112, 113, 114, 115, ),
        /* 99 */ array(38, 44, 112, 113, 114, 115, ),
        /* 100 */ array(38, 44, 112, 113, 114, 115, ),
        /* 101 */ array(38, 44, 112, 113, 114, 115, ),
        /* 102 */ array(38, 44, 112, 113, 114, 115, ),
        /* 103 */ array(38, 44, 112, 113, 114, 115, ),
        /* 104 */ array(19, 35, 38, 43, 106, 107, 108, 109, 111, ),
        /* 105 */ array(38, 112, 113, 114, 115, ),
        /* 106 */ array(23, 24, 32, 41, 42, ),
        /* 107 */ array(19, 35, 36, 38, 106, 107, 108, 109, 111, ),
        /* 108 */ array(19, 35, 38, 106, 107, 108, 109, 111, ),
        /* 109 */ array(23, 24, 32, 42, ),
        /* 110 */ array(21, 62, 63, ),
        /* 111 */ array(19, 38, 43, ),
        /* 112 */ array(19, 38, 43, ),
        /* 113 */ array(19, 38, 43, ),
        /* 114 */ array(46, 47, ),
        /* 115 */ array(19, 21, ),
        /* 116 */ array(35, ),
        /* 117 */ array(59, ),
        /* 118 */ array(35, ),
        /* 119 */ array(35, ),
        /* 120 */ array(35, ),
        /* 121 */ array(19, 35, 106, 107, 108, 109, 111, ),
        /* 122 */ array(19, 35, 106, 107, 108, 109, 111, ),
        /* 123 */ array(23, 24, 25, ),
        /* 124 */ array(26, 30, 31, ),
        /* 125 */ array(21, 62, 63, ),
        /* 126 */ array(20, 22, ),
        /* 127 */ array(20, 22, ),
        /* 128 */ array(20, 22, ),
        /* 129 */ array(20, 22, ),
        /* 130 */ array(20, 22, ),
        /* 131 */ array(19, 20, ),
        /* 132 */ array(20, 22, ),
        /* 133 */ array(20, 22, ),
        /* 134 */ array(19, 38, ),
        /* 135 */ array(20, 22, ),
        /* 136 */ array(20, 22, ),
        /* 137 */ array(19, 20, ),
        /* 138 */ array(20, 22, ),
        /* 139 */ array(20, 22, ),
        /* 140 */ array(20, 22, ),
        /* 141 */ array(19, ),
        /* 142 */ array(20, ),
        /* 143 */ array(59, ),
        /* 144 */ array(3, 4, 5, 6, 7, 9, 34, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, ),
        /* 145 */ array(3, 4, 5, 6, 7, 9, 86, ),
        /* 146 */ array(3, 4, 5, 6, 7, 9, 86, ),
        /* 147 */ array(3, 4, 5, 6, 7, 9, 86, ),
        /* 148 */ array(3, 4, 5, 6, 7, 9, 86, ),
        /* 149 */ array(35, 69, 98, 99, 100, 101, ),
        /* 150 */ array(35, 69, 98, 99, 100, 101, ),
        /* 151 */ array(35, 69, 98, 99, 100, 101, ),
        /* 152 */ array(40, 41, 87, 88, ),
        /* 153 */ array(35, 44, 95, 96, ),
        /* 154 */ array(40, 41, 87, 88, ),
        /* 155 */ array(40, 41, 87, 88, ),
        /* 156 */ array(40, 41, 87, 88, ),
        /* 157 */ array(40, 41, 87, 88, ),
        /* 158 */ array(40, 41, 87, 88, ),
        /* 159 */ array(40, 41, 87, 88, ),
        /* 160 */ array(40, 41, 87, 88, ),
        /* 161 */ array(12, 34, 35, ),
        /* 162 */ array(44, 95, 96, ),
        /* 163 */ array(34, 35, 110, ),
        /* 164 */ array(19, 37, 38, ),
        /* 165 */ array(93, 94, 95, ),
        /* 166 */ array(19, 37, 38, ),
        /* 167 */ array(93, 94, 95, ),
        /* 168 */ array(12, 34, 35, ),
        /* 169 */ array(93, 94, 95, ),
        /* 170 */ array(44, 95, 96, ),
        /* 171 */ array(33, 36, ),
        /* 172 */ array(12, 34, ),
        /* 173 */ array(34, 110, ),
        /* 174 */ array(12, 34, ),
        /* 175 */ array(33, 36, ),
        /* 176 */ array(33, 36, ),
        /* 177 */ array(26, 110, ),
        /* 178 */ array(33, 36, ),
        /* 179 */ array(89, 90, ),
        /* 180 */ array(89, 90, ),
        /* 181 */ array(33, 36, ),
        /* 182 */ array(34, 110, ),
        /* 183 */ array(19, 95, ),
        /* 184 */ array(91, 92, ),
        /* 185 */ array(89, 90, ),
        /* 186 */ array(19, 38, ),
        /* 187 */ array(19, 95, ),
        /* 188 */ array(91, 92, ),
        /* 189 */ array(19, 22, ),
        /* 190 */ array(33, 41, ),
        /* 191 */ array(22, 33, ),
        /* 192 */ array(33, 36, ),
        /* 193 */ array(33, 36, ),
        /* 194 */ array(19, 22, ),
        /* 195 */ array(19, 22, ),
        /* 196 */ array(22, 33, ),
        /* 197 */ array(22, 33, ),
        /* 198 */ array(21, 33, ),
        /* 199 */ array(19, 38, ),
        /* 200 */ array(19, 22, ),
        /* 201 */ array(91, 92, ),
        /* 202 */ array(89, 90, ),
        /* 203 */ array(113, 115, ),
        /* 204 */ array(33, 41, ),
        /* 205 */ array(19, 38, ),
        /* 206 */ array(33, 36, ),
        /* 207 */ array(113, 115, ),
        /* 208 */ array(33, 36, ),
        /* 209 */ array(22, 33, ),
        /* 210 */ array(34, 35, ),
        /* 211 */ array(33, 41, ),
        /* 212 */ array(89, 90, ),
        /* 213 */ array(12, ),
        /* 214 */ array(35, ),
        /* 215 */ array(44, ),
        /* 216 */ array(38, ),
        /* 217 */ array(20, ),
        /* 218 */ array(35, ),
        /* 219 */ array(22, ),
        /* 220 */ array(52, ),
        /* 221 */ array(35, ),
        /* 222 */ array(22, ),
        /* 223 */ array(26, ),
        /* 224 */ array(35, ),
        /* 225 */ array(20, ),
        /* 226 */ array(20, ),
        /* 227 */ array(19, ),
        /* 228 */ array(19, ),
        /* 229 */ array(36, ),
        /* 230 */ array(22, ),
        /* 231 */ array(22, ),
        /* 232 */ array(35, ),
        /* 233 */ array(22, ),
        /* 234 */ array(45, ),
        /* 235 */ array(40, ),
        /* 236 */ array(35, ),
        /* 237 */ array(35, ),
        /* 238 */ array(36, ),
        /* 239 */ array(36, ),
        /* 240 */ array(40, ),
        /* 241 */ array(34, ),
        /* 242 */ array(33, ),
        /* 243 */ array(95, ),
        /* 244 */ array(41, ),
        /* 245 */ array(40, ),
        /* 246 */ array(110, ),
        /* 247 */ array(12, ),
        /* 248 */ array(40, ),
        /* 249 */ array(26, ),
        /* 250 */ array(115, ),
        /* 251 */ array(113, ),
        /* 252 */ array(38, ),
        /* 253 */ array(22, ),
        /* 254 */ array(26, ),
        /* 255 */ array(110, ),
        /* 256 */ array(19, ),
        /* 257 */ array(35, ),
        /* 258 */ array(38, ),
        /* 259 */ array(36, ),
        /* 260 */ array(19, ),
        /* 261 */ array(19, ),
        /* 262 */ array(12, ),
        /* 263 */ array(35, ),
        /* 264 */ array(36, ),
        /* 265 */ array(19, ),
        /* 266 */ array(35, ),
        /* 267 */ array(19, ),
        /* 268 */ array(12, ),
        /* 269 */ array(36, ),
        /* 270 */ array(70, ),
        /* 271 */ array(113, ),
        /* 272 */ array(40, ),
        /* 273 */ array(19, ),
        /* 274 */ array(41, ),
        /* 275 */ array(22, ),
        /* 276 */ array(2, ),
        /* 277 */ array(40, ),
        /* 278 */ array(35, ),
        /* 279 */ array(22, ),
        /* 280 */ array(41, ),
        /* 281 */ array(34, ),
        /* 282 */ array(22, ),
        /* 283 */ array(41, ),
        /* 284 */ array(19, ),
        /* 285 */ array(36, ),
        /* 286 */ array(113, ),
        /* 287 */ array(22, ),
        /* 288 */ array(19, ),
        /* 289 */ array(35, ),
        /* 290 */ array(40, ),
        /* 291 */ array(36, ),
        /* 292 */ array(70, ),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
        /* 398 */ array(),
        /* 399 */ array(),
        /* 400 */ array(),
        /* 401 */ array(),
        /* 402 */ array(),
        /* 403 */ array(),
        /* 404 */ array(),
        /* 405 */ array(),
        /* 406 */ array(),
        /* 407 */ array(),
        /* 408 */ array(),
        /* 409 */ array(),
        /* 410 */ array(),
        /* 411 */ array(),
        /* 412 */ array(),
        /* 413 */ array(),
        /* 414 */ array(),
        /* 415 */ array(),
        /* 416 */ array(),
        /* 417 */ array(),
        /* 418 */ array(),
        /* 419 */ array(),
        /* 420 */ array(),
        /* 421 */ array(),
        /* 422 */ array(),
        /* 423 */ array(),
        /* 424 */ array(),
        /* 425 */ array(),
        /* 426 */ array(),
        /* 427 */ array(),
        /* 428 */ array(),
        /* 429 */ array(),
        /* 430 */ array(),
        /* 431 */ array(),
        /* 432 */ array(),
        /* 433 */ array(),
        /* 434 */ array(),
        /* 435 */ array(),
        /* 436 */ array(),
        /* 437 */ array(),
        /* 438 */ array(),
        /* 439 */ array(),
        /* 440 */ array(),
        /* 441 */ array(),
        /* 442 */ array(),
        /* 443 */ array(),
        /* 444 */ array(),
        /* 445 */ array(),
        /* 446 */ array(),
        /* 447 */ array(),
        /* 448 */ array(),
        /* 449 */ array(),
        /* 450 */ array(),
        /* 451 */ array(),
        /* 452 */ array(),
        /* 453 */ array(),
        /* 454 */ array(),
        /* 455 */ array(),
        /* 456 */ array(),
        /* 457 */ array(),
        /* 458 */ array(),
        /* 459 */ array(),
        /* 460 */ array(),
        /* 461 */ array(),
        /* 462 */ array(),
        /* 463 */ array(),
        /* 464 */ array(),
        /* 465 */ array(),
        /* 466 */ array(),
        /* 467 */ array(),
        /* 468 */ array(),
        /* 469 */ array(),
        /* 470 */ array(),
        /* 471 */ array(),
        /* 472 */ array(),
        /* 473 */ array(),
        /* 474 */ array(),
        /* 475 */ array(),
        /* 476 */ array(),
        /* 477 */ array(),
        /* 478 */ array(),
        /* 479 */ array(),
);
    static public $yy_default = array(
 /*     0 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    10 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  594,
 /*    20 */   480,  593,  560,  561,  717,  717,  717,  717,  717,  717,
 /*    30 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    40 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    50 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    60 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    70 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    80 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*    90 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   100 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   110 */   717,  717,  717,  717,  556,  717,  717,  717,  717,  717,
 /*   120 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   130 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   140 */   717,  717,  717,  578,  633,  607,  610,  606,  611,  665,
 /*   150 */   666,  669,  637,  698,  641,  634,  640,  636,  635,  639,
 /*   160 */   638,  613,  697,  608,  717,  650,  717,  652,  609,  651,
 /*   170 */   698,  717,  609,  608,  613,  717,  717,  717,  717,  645,
 /*   180 */   644,  717,  717,  717,  647,  642,  717,  717,  648,  717,
 /*   190 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   200 */   717,  649,  646,  717,  717,  717,  717,  717,  717,  717,
 /*   210 */   612,  717,  643,  703,  717,  546,  717,  717,  717,  717,
 /*   220 */   717,  717,  717,  686,  717,  717,  717,  717,  717,  717,
 /*   230 */   717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   240 */   717,  519,  585,  717,  717,  717,  520,  703,  708,  717,
 /*   250 */   717,  717,  717,  717,  717,  678,  717,  717,  717,  717,
 /*   260 */   717,  717,  703,  717,  717,  717,  717,  717,  543,  717,
 /*   270 */   717,  717,  704,  717,  717,  717,  596,  717,  717,  717,
 /*   280 */   717,  612,  717,  717,  717,  717,  717,  717,  717,  717,
 /*   290 */   717,  717,  717,  528,  490,  484,  572,  571,  491,  497,
 /*   300 */   499,  503,  505,  569,  504,  509,  502,  501,  508,  498,
 /*   310 */   507,  506,  500,  570,  557,  601,  600,  580,  602,  482,
 /*   320 */   579,  591,  587,  588,  589,  592,  595,  597,  599,  598,
 /*   330 */   581,  584,  524,  544,  575,  525,  527,  574,  541,  559,
 /*   340 */   586,  583,  577,  582,  590,  576,  573,  623,  679,  677,
 /*   350 */   676,  680,  656,  699,  681,  668,  667,  663,  662,  664,
 /*   360 */   654,  655,  604,  700,  701,  714,  713,  715,  716,  710,
 /*   370 */   682,  709,  712,  711,  707,  702,  695,  696,  705,  706,
 /*   380 */   661,  660,  496,  495,  494,  523,  493,  511,  510,  492,
 /*   390 */   489,  483,  481,  485,  486,  488,  487,  513,  515,  657,
 /*   400 */   653,  670,  658,  659,  671,  622,  603,  691,  517,  685,
 /*   410 */   686,  688,  687,  683,  684,  530,  529,  522,  531,  532,
 /*   420 */   535,  533,  545,  526,  548,  547,  549,  551,  550,  552,
 /*   430 */   536,  537,  563,  562,  564,  565,  567,  566,  558,  555,
 /*   440 */   539,  538,  534,  540,  554,  553,  542,  521,  619,  618,
 /*   450 */   617,  620,  621,  605,  672,  616,  615,  692,  690,  693,
 /*   460 */   694,  689,  614,  674,  675,  632,  631,  516,  518,  514,
 /*   470 */   512,  630,  629,  624,  673,  625,  626,  628,  627,  568,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 182;
    const YYSTACKDEPTH = 100;
    const lock_formal_langs_parser_cpp_languageARG_DECL = '0';
    const YYNSTATE = 480;
    const YYNRULE = 237;
    const YYERRORSYMBOL = 116;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'THENKWD',       'ELSEKWD',       'BINARYOR',    
  'LOGICALOR',     'LOGICALAND',    'BINARYXOR',     'BINARYAND',   
  'NOTEQUAL',      'EQUAL',         'UINDIRECTION',  'UADRESS',     
  'NAMESPACE_RESOLVE',  'UMINUS',        'UPLUS',         'UBRACKET',    
  'TYPEUNARY',     'MACROPARAMETERPRIORITY',  'NAMESPACEKWD',  'IDENTIFIER',  
  'LEFTFIGUREBRACKET',  'RIGHTFIGUREBRACKET',  'SEMICOLON',     'CLASSKWD',    
  'STRUCTKWD',     'UNIONKWD',      'COLON',         'PUBLICKWD',   
  'PROTECTEDKWD',  'PRIVATEKWD',    'SIGNALSKWD',    'SLOTSKWD',    
  'ENUMKWD',       'COMMA',         'ASSIGN',        'LEFTROUNDBRACKET',
  'RIGHTROUNDBRACKET',  'BINARYNOT',     'CUSTOMTYPENAME',  'TEMPLATEKWD', 
  'LESSER',        'GREATER',       'TYPENAMEKWD',   'OPERATOROVERLOADDECLARATION',
  'CONSTKWD',      'PREPROCESSOR_ENDIF',  'PREPROCESSOR_ELIF',  'PREPROCESSOR_ELSE',
  'PREPROCESSOR_IFDEF',  'PREPROCESSOR_IF',  'PREPROCESSOR_DEFINE',  'PREPROCESSOR_INCLUDE',
  'WHILEKWD',      'DOKWD',         'FORKWD',        'RETURNKWD',   
  'CONTINUEKWD',   'GOTOKWD',       'TRYKWD',        'CATCHKWD',    
  'ELLIPSIS',      'SWITCHKWD',     'CASEKWD',       'DEFAULTKWD',  
  'IFKWD',         'TYPEDEF',       'BREAKKWD',      'NEWKWD',      
  'DELETE',        'LEFTSQUAREBRACKET',  'RIGHTSQUAREBRACKET',  'STATICKWD',   
  'EXTERNKWD',     'REGISTERKWD',   'VOLATILEKWD',   'FRIENDKWD',   
  'BINARYXOR_ASSIGN',  'BINARYOR_ASSIGN',  'BINARYAND_ASSIGN',  'RIGHTSHIFT_ASSIGN',
  'LEFTSHIFT_ASSIGN',  'MODULO_ASSIGN',  'DIVISION_ASSIGN',  'MULTIPLY_ASSIGN',
  'PLUS_ASSIGN',   'MINUS_ASSIGN',  'NOT_EQUAL',     'LESSER_OR_EQUAL',
  'GREATER_OR_EQUAL',  'LEFTSHIFT',     'RIGHTSHIFT',    'MINUS',       
  'PLUS',          'MODULOSIGN',    'DIVISION',      'MULTIPLY',    
  'AMPERSAND',     'LOGICALNOT',    'DECREMENT',     'INCREMENT',   
  'DOT',           'RIGHTARROW',    'CONST_CAST',    'STATIC_CAST', 
  'DYNAMIC_CAST',  'REINTERPRET_CAST',  'NUMERIC',       'CHARACTER',   
  'STRING',        'PREPROCESSOR_STRINGIFY',  'PREPROCESSOR_CONCAT',  'SIZEOF',      
  'SIGNED',        'TYPENAME',      'UNSIGNED',      'LONG',        
  'error',         'program',       'stmt_list',     'stmt_or_defined_macro',
  'stmt',          'namespace_body',  'class_or_union_or_struct',  'type_meta_specifier_with_template_def',
  'structure_body',  'template_def',  'type_meta_specifier',  'stmt_or_visibility_spec_list',
  'stmt_or_visibility_spec',  'visibility_spec_full',  'visibility_spec',  'signal_slots',
  'enum_body',     'enum_value_list',  'enum_value',    'expr_atom',   
  'type',          'possible_function_name',  'formal_args_list_with_or_without_const',  'function_body',
  'type_with_qualifier',  'non_const_type',  'primitive_or_complex_type',  'template_spec_list',
  'template_spec',  'template_typename',  'formal_args_list',  'arg_list',    
  'arg',           'preprocessor_cond',  'preprocessor_else_clauses',  'preprocessor_elif_list',
  'preprocessor_else',  'preprocessor_elif',  'expr_prec_11',  'try_catch',   
  'try',           'catch_list',    'catch',         'expr_prec_11_or_ellipsis',
  'switch_stmt',   'switch_case_list',  'case',          'if_then_else',
  'if_then',       'expr_prec_10',  'expr_prec_9',   'varqualifier',
  'expr_prec_8',   'expr_prec_7',   'expr_prec_6',   'expr_prec_5', 
  'expr_prec_4',   'try_value_access',  'try_pointer_access',  'expr_prec_3', 
  'typecast',      'expr_prec_2',   'cpp_style_cast',  'type_list',   
  'builtintype', 
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "program ::= stmt_list",
 /*   1 */ "stmt_list ::= stmt_list stmt_or_defined_macro",
 /*   2 */ "stmt_list ::= stmt_or_defined_macro",
 /*   3 */ "stmt ::= NAMESPACEKWD IDENTIFIER namespace_body",
 /*   4 */ "namespace_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*   5 */ "namespace_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*   6 */ "stmt ::= class_or_union_or_struct",
 /*   7 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body IDENTIFIER SEMICOLON",
 /*   8 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER structure_body SEMICOLON",
 /*   9 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def IDENTIFIER SEMICOLON",
 /*  10 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body IDENTIFIER SEMICOLON",
 /*  11 */ "class_or_union_or_struct ::= type_meta_specifier_with_template_def structure_body SEMICOLON",
 /*  12 */ "type_meta_specifier_with_template_def ::= template_def type_meta_specifier",
 /*  13 */ "type_meta_specifier_with_template_def ::= type_meta_specifier",
 /*  14 */ "type_meta_specifier ::= CLASSKWD",
 /*  15 */ "type_meta_specifier ::= STRUCTKWD",
 /*  16 */ "type_meta_specifier ::= UNIONKWD",
 /*  17 */ "structure_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  18 */ "structure_body ::= LEFTFIGUREBRACKET stmt_or_visibility_spec_list RIGHTFIGUREBRACKET",
 /*  19 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec",
 /*  20 */ "stmt_or_visibility_spec_list ::= stmt_or_visibility_spec_list stmt_or_visibility_spec",
 /*  21 */ "stmt_or_visibility_spec ::= visibility_spec_full",
 /*  22 */ "stmt_or_visibility_spec ::= stmt_or_defined_macro",
 /*  23 */ "visibility_spec_full ::= visibility_spec COLON",
 /*  24 */ "visibility_spec_full ::= visibility_spec signal_slots COLON",
 /*  25 */ "visibility_spec ::= PUBLICKWD",
 /*  26 */ "visibility_spec ::= PROTECTEDKWD",
 /*  27 */ "visibility_spec ::= PRIVATEKWD",
 /*  28 */ "signal_slots ::= SIGNALSKWD",
 /*  29 */ "signal_slots ::= SLOTSKWD",
 /*  30 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER SEMICOLON",
 /*  31 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body SEMICOLON",
 /*  32 */ "stmt_or_defined_macro ::= ENUMKWD enum_body SEMICOLON",
 /*  33 */ "stmt_or_defined_macro ::= ENUMKWD IDENTIFIER enum_body IDENTIFIER SEMICOLON",
 /*  34 */ "stmt_or_defined_macro ::= ENUMKWD enum_body IDENTIFIER SEMICOLON",
 /*  35 */ "enum_body ::= LEFTFIGUREBRACKET enum_value_list RIGHTFIGUREBRACKET",
 /*  36 */ "enum_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  37 */ "enum_value_list ::= enum_value_list COMMA enum_value",
 /*  38 */ "enum_value_list ::= enum_value",
 /*  39 */ "enum_value ::= IDENTIFIER",
 /*  40 */ "enum_value ::= IDENTIFIER ASSIGN expr_atom",
 /*  41 */ "stmt_or_defined_macro ::= type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  42 */ "stmt_or_defined_macro ::= type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  43 */ "stmt_or_defined_macro ::= template_def type_with_qualifier possible_function_name formal_args_list_with_or_without_const function_body",
 /*  44 */ "stmt_or_defined_macro ::= template_def type possible_function_name formal_args_list_with_or_without_const function_body",
 /*  45 */ "stmt_or_defined_macro ::= template_def non_const_type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  46 */ "stmt_or_defined_macro ::= type LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  47 */ "stmt_or_defined_macro ::= template_def BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  48 */ "stmt_or_defined_macro ::= template_def primitive_or_complex_type NAMESPACE_RESOLVE BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  49 */ "stmt_or_defined_macro ::= BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  50 */ "stmt_or_defined_macro ::= primitive_or_complex_type NAMESPACE_RESOLVE BINARYNOT CUSTOMTYPENAME LEFTROUNDBRACKET RIGHTROUNDBRACKET function_body",
 /*  51 */ "template_def ::= TEMPLATEKWD LESSER GREATER",
 /*  52 */ "template_def ::= TEMPLATEKWD LESSER template_spec_list GREATER",
 /*  53 */ "template_spec_list ::= template_spec_list COMMA template_spec",
 /*  54 */ "template_spec_list ::= template_spec",
 /*  55 */ "template_spec ::= template_typename IDENTIFIER",
 /*  56 */ "template_typename ::= TYPENAMEKWD",
 /*  57 */ "template_typename ::= CLASSKWD",
 /*  58 */ "template_typename ::= STRUCTKWD",
 /*  59 */ "template_typename ::= ENUMKWD",
 /*  60 */ "function_body ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /*  61 */ "function_body ::= LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /*  62 */ "function_body ::= SEMICOLON",
 /*  63 */ "possible_function_name ::= primitive_or_complex_type",
 /*  64 */ "possible_function_name ::= IDENTIFIER",
 /*  65 */ "possible_function_name ::= OPERATOROVERLOADDECLARATION",
 /*  66 */ "formal_args_list_with_or_without_const ::= formal_args_list",
 /*  67 */ "formal_args_list_with_or_without_const ::= formal_args_list CONSTKWD",
 /*  68 */ "formal_args_list ::= LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /*  69 */ "formal_args_list ::= LEFTROUNDBRACKET arg_list RIGHTROUNDBRACKET",
 /*  70 */ "arg_list ::= arg",
 /*  71 */ "arg_list ::= arg_list COMMA arg",
 /*  72 */ "arg ::= type IDENTIFIER",
 /*  73 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list PREPROCESSOR_ENDIF",
 /*  74 */ "stmt_or_defined_macro ::= preprocessor_cond stmt_list preprocessor_else_clauses PREPROCESSOR_ENDIF",
 /*  75 */ "preprocessor_else_clauses ::= preprocessor_elif_list preprocessor_else",
 /*  76 */ "preprocessor_else_clauses ::= preprocessor_elif_list",
 /*  77 */ "preprocessor_else_clauses ::= preprocessor_else",
 /*  78 */ "preprocessor_elif_list ::= preprocessor_elif_list preprocessor_elif",
 /*  79 */ "preprocessor_elif_list ::= preprocessor_elif",
 /*  80 */ "preprocessor_elif ::= PREPROCESSOR_ELIF stmt_list",
 /*  81 */ "preprocessor_else ::= PREPROCESSOR_ELSE stmt_list",
 /*  82 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF IDENTIFIER",
 /*  83 */ "preprocessor_cond ::= PREPROCESSOR_IFDEF CUSTOMTYPENAME",
 /*  84 */ "preprocessor_cond ::= PREPROCESSOR_IF",
 /*  85 */ "stmt_or_defined_macro ::= PREPROCESSOR_DEFINE",
 /*  86 */ "stmt_or_defined_macro ::= stmt",
 /*  87 */ "stmt ::= PREPROCESSOR_INCLUDE",
 /*  88 */ "stmt ::= WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  89 */ "stmt ::= DOKWD stmt WHILEKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET SEMICOLON",
 /*  90 */ "stmt ::= FORKWD LEFTROUNDBRACKET expr_prec_11 SEMICOLON expr_prec_11 SEMICOLON expr_prec_11 RIGHTROUNDBRACKET stmt",
 /*  91 */ "stmt ::= RETURNKWD expr_prec_11 SEMICOLON",
 /*  92 */ "stmt ::= RETURNKWD SEMICOLON",
 /*  93 */ "stmt ::= CONTINUEKWD SEMICOLON",
 /*  94 */ "stmt ::= GOTOKWD IDENTIFIER SEMICOLON",
 /*  95 */ "stmt ::= GOTOKWD CUSTOMTYPENAME SEMICOLON",
 /*  96 */ "stmt ::= IDENTIFIER COLON",
 /*  97 */ "stmt ::= try_catch",
 /*  98 */ "try_catch ::= try catch_list",
 /*  99 */ "try ::= TRYKWD LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 100 */ "try ::= TRYKWD LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 101 */ "catch_list ::= catch_list catch",
 /* 102 */ "catch_list ::= catch",
 /* 103 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 104 */ "catch ::= CATCHKWD LEFTROUNDBRACKET expr_prec_11_or_ellipsis RIGHTROUNDBRACKET LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 105 */ "expr_prec_11_or_ellipsis ::= expr_prec_11",
 /* 106 */ "expr_prec_11_or_ellipsis ::= ELLIPSIS",
 /* 107 */ "stmt ::= SEMICOLON",
 /* 108 */ "stmt ::= switch_stmt",
 /* 109 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET RIGHTFIGUREBRACKET",
 /* 110 */ "switch_stmt ::= SWITCHKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET LEFTFIGUREBRACKET switch_case_list RIGHTFIGUREBRACKET",
 /* 111 */ "switch_case_list ::= case",
 /* 112 */ "switch_case_list ::= switch_case_list case",
 /* 113 */ "case ::= CASEKWD expr_atom COLON stmt_list",
 /* 114 */ "case ::= DEFAULTKWD COLON stmt_list",
 /* 115 */ "stmt ::= if_then_else",
 /* 116 */ "if_then_else ::= if_then",
 /* 117 */ "if_then_else ::= if_then ELSEKWD stmt",
 /* 118 */ "if_then ::= IFKWD LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET stmt",
 /* 119 */ "stmt ::= LEFTFIGUREBRACKET stmt_list RIGHTFIGUREBRACKET",
 /* 120 */ "stmt ::= TYPEDEF type IDENTIFIER SEMICOLON",
 /* 121 */ "stmt ::= BREAKKWD SEMICOLON",
 /* 122 */ "stmt ::= expr_prec_11 SEMICOLON",
 /* 123 */ "expr_prec_11 ::= NEWKWD expr_prec_10",
 /* 124 */ "expr_prec_11 ::= DELETE LEFTSQUAREBRACKET RIGHTSQUAREBRACKET expr_prec_10",
 /* 125 */ "expr_prec_11 ::= DELETE expr_prec_10",
 /* 126 */ "expr_prec_11 ::= type expr_atom ASSIGN expr_prec_9",
 /* 127 */ "expr_prec_11 ::= type primitive_or_complex_type ASSIGN expr_prec_9",
 /* 128 */ "expr_prec_11 ::= type IDENTIFIER",
 /* 129 */ "expr_prec_11 ::= type primitive_or_complex_type",
 /* 130 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER ASSIGN expr_prec_9",
 /* 131 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type ASSIGN expr_prec_9",
 /* 132 */ "expr_prec_11 ::= type_with_qualifier IDENTIFIER",
 /* 133 */ "expr_prec_11 ::= type_with_qualifier primitive_or_complex_type",
 /* 134 */ "expr_prec_11 ::= expr_prec_11 COMMA expr_prec_10",
 /* 135 */ "expr_prec_11 ::= expr_prec_10",
 /* 136 */ "type_with_qualifier ::= varqualifier type",
 /* 137 */ "varqualifier ::= STATICKWD",
 /* 138 */ "varqualifier ::= EXTERNKWD",
 /* 139 */ "varqualifier ::= REGISTERKWD",
 /* 140 */ "varqualifier ::= VOLATILEKWD",
 /* 141 */ "varqualifier ::= FRIENDKWD",
 /* 142 */ "expr_prec_10 ::= expr_prec_9 BINARYXOR_ASSIGN expr_prec_10",
 /* 143 */ "expr_prec_10 ::= expr_prec_9 BINARYOR_ASSIGN expr_prec_10",
 /* 144 */ "expr_prec_10 ::= expr_prec_9 BINARYAND_ASSIGN expr_prec_10",
 /* 145 */ "expr_prec_10 ::= expr_prec_9 RIGHTSHIFT_ASSIGN expr_prec_10",
 /* 146 */ "expr_prec_10 ::= expr_prec_9 LEFTSHIFT_ASSIGN expr_prec_10",
 /* 147 */ "expr_prec_10 ::= expr_prec_9 MODULO_ASSIGN expr_prec_10",
 /* 148 */ "expr_prec_10 ::= expr_prec_9 DIVISION_ASSIGN expr_prec_10",
 /* 149 */ "expr_prec_10 ::= expr_prec_9 MULTIPLY_ASSIGN expr_prec_10",
 /* 150 */ "expr_prec_10 ::= expr_prec_9 PLUS_ASSIGN expr_prec_10",
 /* 151 */ "expr_prec_10 ::= expr_prec_9 MINUS_ASSIGN expr_prec_10",
 /* 152 */ "expr_prec_10 ::= expr_prec_9 ASSIGN expr_prec_10",
 /* 153 */ "expr_prec_10 ::= expr_prec_9",
 /* 154 */ "expr_prec_9 ::= expr_prec_9 BINARYOR expr_prec_8",
 /* 155 */ "expr_prec_9 ::= expr_prec_9 LOGICALOR expr_prec_8",
 /* 156 */ "expr_prec_9 ::= expr_prec_9 LOGICALAND expr_prec_8",
 /* 157 */ "expr_prec_9 ::= expr_prec_9 BINARYXOR expr_prec_8",
 /* 158 */ "expr_prec_9 ::= expr_prec_9 BINARYAND expr_prec_8",
 /* 159 */ "expr_prec_9 ::= expr_prec_9 NOT_EQUAL expr_prec_8",
 /* 160 */ "expr_prec_9 ::= expr_prec_9 EQUAL expr_prec_8",
 /* 161 */ "expr_prec_9 ::= expr_prec_8",
 /* 162 */ "expr_prec_8 ::= expr_prec_8 LESSER_OR_EQUAL expr_prec_7",
 /* 163 */ "expr_prec_8 ::= expr_prec_8 GREATER_OR_EQUAL expr_prec_7",
 /* 164 */ "expr_prec_8 ::= expr_prec_8 GREATER expr_prec_7",
 /* 165 */ "expr_prec_8 ::= expr_prec_8 LESSER expr_prec_7",
 /* 166 */ "expr_prec_8 ::= expr_prec_7",
 /* 167 */ "expr_prec_7 ::= expr_prec_7 LEFTSHIFT expr_prec_6",
 /* 168 */ "expr_prec_7 ::= expr_prec_7 RIGHTSHIFT expr_prec_6",
 /* 169 */ "expr_prec_7 ::= expr_prec_6",
 /* 170 */ "expr_prec_6 ::= expr_prec_6 MINUS expr_prec_5",
 /* 171 */ "expr_prec_6 ::= expr_prec_6 PLUS expr_prec_5",
 /* 172 */ "expr_prec_6 ::= expr_prec_5",
 /* 173 */ "expr_prec_5 ::= expr_prec_5 MODULOSIGN expr_prec_4",
 /* 174 */ "expr_prec_5 ::= expr_prec_5 DIVISION expr_prec_4",
 /* 175 */ "expr_prec_5 ::= expr_prec_5 MULTIPLY expr_prec_4",
 /* 176 */ "expr_prec_5 ::= expr_prec_4",
 /* 177 */ "expr_prec_4 ::= try_value_access MULTIPLY IDENTIFIER",
 /* 178 */ "expr_prec_4 ::= try_pointer_access MULTIPLY IDENTIFIER",
 /* 179 */ "expr_prec_4 ::= expr_prec_3",
 /* 180 */ "expr_prec_3 ::= AMPERSAND expr_prec_3",
 /* 181 */ "expr_prec_3 ::= MULTIPLY expr_prec_3",
 /* 182 */ "expr_prec_3 ::= typecast expr_prec_3",
 /* 183 */ "expr_prec_3 ::= LOGICALNOT expr_prec_3",
 /* 184 */ "expr_prec_3 ::= BINARYNOT expr_prec_3",
 /* 185 */ "expr_prec_3 ::= MINUS expr_prec_2",
 /* 186 */ "expr_prec_3 ::= PLUS expr_prec_2",
 /* 187 */ "expr_prec_3 ::= DECREMENT expr_prec_3",
 /* 188 */ "expr_prec_3 ::= INCREMENT expr_prec_3",
 /* 189 */ "expr_prec_3 ::= expr_prec_2",
 /* 190 */ "expr_prec_2 ::= try_value_access IDENTIFIER",
 /* 191 */ "expr_prec_2 ::= try_pointer_access IDENTIFIER",
 /* 192 */ "expr_prec_2 ::= cpp_style_cast LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 193 */ "expr_prec_2 ::= expr_prec_2 LEFTSQUAREBRACKET expr_prec_10 RIGHTSQUAREBRACKET",
 /* 194 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 195 */ "expr_prec_2 ::= expr_prec_2 LEFTROUNDBRACKET RIGHTROUNDBRACKET",
 /* 196 */ "expr_prec_2 ::= expr_prec_2 INCREMENT",
 /* 197 */ "expr_prec_2 ::= expr_prec_2 DECREMENT",
 /* 198 */ "expr_prec_2 ::= expr_atom",
 /* 199 */ "try_value_access ::= expr_prec_2 DOT",
 /* 200 */ "try_pointer_access ::= expr_prec_2 RIGHTARROW",
 /* 201 */ "cpp_style_cast ::= CONST_CAST LESSER type GREATER",
 /* 202 */ "cpp_style_cast ::= STATIC_CAST LESSER type GREATER",
 /* 203 */ "cpp_style_cast ::= DYNAMIC_CAST LESSER type GREATER",
 /* 204 */ "cpp_style_cast ::= REINTERPRET_CAST LESSER type GREATER",
 /* 205 */ "expr_atom ::= NUMERIC",
 /* 206 */ "expr_atom ::= IDENTIFIER",
 /* 207 */ "expr_atom ::= CHARACTER",
 /* 208 */ "expr_atom ::= STRING",
 /* 209 */ "expr_atom ::= LEFTROUNDBRACKET expr_prec_11 RIGHTROUNDBRACKET",
 /* 210 */ "expr_atom ::= PREPROCESSOR_STRINGIFY IDENTIFIER",
 /* 211 */ "expr_atom ::= expr_atom PREPROCESSOR_CONCAT IDENTIFIER",
 /* 212 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET type RIGHTROUNDBRACKET",
 /* 213 */ "expr_atom ::= SIZEOF LEFTROUNDBRACKET IDENTIFIER RIGHTROUNDBRACKET",
 /* 214 */ "typecast ::= LEFTROUNDBRACKET type RIGHTROUNDBRACKET",
 /* 215 */ "type_list ::= type",
 /* 216 */ "type_list ::= type_list COMMA type",
 /* 217 */ "type ::= CONSTKWD non_const_type",
 /* 218 */ "type ::= non_const_type",
 /* 219 */ "non_const_type ::= non_const_type MULTIPLY",
 /* 220 */ "non_const_type ::= non_const_type CONSTKWD MULTIPLY",
 /* 221 */ "non_const_type ::= non_const_type AMPERSAND",
 /* 222 */ "non_const_type ::= builtintype",
 /* 223 */ "non_const_type ::= primitive_or_complex_type",
 /* 224 */ "primitive_or_complex_type ::= CUSTOMTYPENAME",
 /* 225 */ "primitive_or_complex_type ::= CUSTOMTYPENAME LESSER GREATER",
 /* 226 */ "primitive_or_complex_type ::= CUSTOMTYPENAME LESSER type_list GREATER",
 /* 227 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE IDENTIFIER",
 /* 228 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME",
 /* 229 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME LESSER GREATER",
 /* 230 */ "primitive_or_complex_type ::= primitive_or_complex_type NAMESPACE_RESOLVE CUSTOMTYPENAME LESSER type_list GREATER",
 /* 231 */ "builtintype ::= SIGNED TYPENAME",
 /* 232 */ "builtintype ::= UNSIGNED TYPENAME",
 /* 233 */ "builtintype ::= LONG TYPENAME",
 /* 234 */ "builtintype ::= LONG LONG TYPENAME",
 /* 235 */ "builtintype ::= UNSIGNED LONG LONG TYPENAME",
 /* 236 */ "builtintype ::= TYPENAME",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param lock_formal_langs_parser_cpp_languageyyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new lock_formal_langs_parser_cpp_languageyyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 122, 'rhs' => 5 ),
  array( 'lhs' => 122, 'rhs' => 4 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 122, 'rhs' => 4 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 123, 'rhs' => 2 ),
  array( 'lhs' => 123, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 2 ),
  array( 'lhs' => 124, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 4 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 5 ),
  array( 'lhs' => 119, 'rhs' => 4 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 4 ),
  array( 'lhs' => 119, 'rhs' => 4 ),
  array( 'lhs' => 119, 'rhs' => 5 ),
  array( 'lhs' => 119, 'rhs' => 5 ),
  array( 'lhs' => 119, 'rhs' => 5 ),
  array( 'lhs' => 119, 'rhs' => 4 ),
  array( 'lhs' => 119, 'rhs' => 6 ),
  array( 'lhs' => 119, 'rhs' => 8 ),
  array( 'lhs' => 119, 'rhs' => 5 ),
  array( 'lhs' => 119, 'rhs' => 7 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 4 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 5 ),
  array( 'lhs' => 120, 'rhs' => 7 ),
  array( 'lhs' => 120, 'rhs' => 9 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 4 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 6 ),
  array( 'lhs' => 158, 'rhs' => 7 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 6 ),
  array( 'lhs' => 160, 'rhs' => 7 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 4 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 5 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 4 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 4 ),
  array( 'lhs' => 177, 'rhs' => 4 ),
  array( 'lhs' => 177, 'rhs' => 4 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 178, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 2 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 5 ),
  array( 'lhs' => 142, 'rhs' => 6 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 4 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 41,
        43 => 43,
        44 => 43,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 64,
        65 => 64,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 82,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 94,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        115 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 126,
        131 => 126,
        128 => 128,
        132 => 128,
        133 => 128,
        129 => 129,
        130 => 130,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 176,
        177 => 177,
        178 => 177,
        179 => 179,
        180 => 180,
        181 => 181,
        182 => 182,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        187 => 187,
        188 => 188,
        189 => 189,
        190 => 190,
        191 => 190,
        192 => 192,
        193 => 193,
        194 => 194,
        195 => 195,
        196 => 196,
        197 => 197,
        198 => 198,
        199 => 199,
        200 => 200,
        201 => 201,
        202 => 202,
        203 => 203,
        204 => 204,
        205 => 205,
        206 => 205,
        207 => 205,
        208 => 205,
        209 => 209,
        210 => 210,
        211 => 211,
        212 => 212,
        213 => 213,
        214 => 214,
        215 => 215,
        216 => 216,
        217 => 217,
        218 => 218,
        219 => 219,
        220 => 220,
        221 => 221,
        222 => 222,
        223 => 222,
        224 => 224,
        225 => 225,
        226 => 226,
        227 => 227,
        228 => 227,
        229 => 229,
        230 => 230,
        231 => 231,
        232 => 232,
        233 => 233,
        234 => 234,
        235 => 235,
        236 => 236,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 83 "langs_src/parser_cpp_language.y"
    function yy_r0(){
	$stack = array( $this->create_node('program', array( $this->yystack[$this->yyidx + 0]->minor ) ) );
	if (is_array($this->root)) {
            if (count($this->root)) {
                $this->root = array_merge($this->root, $stack);
            }
            else {
                $this->root  = $stack;
            }
    } else {
            $this->root = $stack;
    }
	$this->_retvalue = $stack;
    }
#line 2969 "langs_src/parser_cpp_language.php"
#line 99 "langs_src/parser_cpp_language.y"
    function yy_r1(){
	$this->currentrule = new block_formal_langs_description_rule("список выражения %l(stmt_or_defined_macro)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2975 "langs_src/parser_cpp_language.php"
#line 104 "langs_src/parser_cpp_language.y"
    function yy_r2(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2981 "langs_src/parser_cpp_language.php"
#line 109 "langs_src/parser_cpp_language.y"
    function yy_r3(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления пространства имен", "идентификатор", "%ur(именительный)"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2988 "langs_src/parser_cpp_language.php"
#line 115 "langs_src/parser_cpp_language.y"
    function yy_r4(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 2994 "langs_src/parser_cpp_language.php"
#line 120 "langs_src/parser_cpp_language.y"
    function yy_r5(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('namespace_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3000 "langs_src/parser_cpp_language.php"
#line 127 "langs_src/parser_cpp_language.y"
    function yy_r6(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3006 "langs_src/parser_cpp_language.php"
#line 132 "langs_src/parser_cpp_language.y"
    function yy_r7(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3013 "langs_src/parser_cpp_language.php"
#line 138 "langs_src/parser_cpp_language.y"
    function yy_r8(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3020 "langs_src/parser_cpp_language.php"
#line 144 "langs_src/parser_cpp_language.y"
    function yy_r9(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3027 "langs_src/parser_cpp_language.php"
#line 150 "langs_src/parser_cpp_language.y"
    function yy_r10(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3033 "langs_src/parser_cpp_language.php"
#line 155 "langs_src/parser_cpp_language.y"
    function yy_r11(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('class_or_union_or_struct', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3039 "langs_src/parser_cpp_language.php"
#line 160 "langs_src/parser_cpp_language.y"
    function yy_r12(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) и %2(именительный)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array(A, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3045 "langs_src/parser_cpp_language.php"
#line 165 "langs_src/parser_cpp_language.y"
    function yy_r13(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_meta_specifier_with_template_def', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3051 "langs_src/parser_cpp_language.php"
#line 170 "langs_src/parser_cpp_language.y"
    function yy_r14(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3057 "langs_src/parser_cpp_language.php"
#line 175 "langs_src/parser_cpp_language.y"
    function yy_r15(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3063 "langs_src/parser_cpp_language.php"
#line 180 "langs_src/parser_cpp_language.y"
    function yy_r16(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления объединения"));
	$this->_retvalue = $this->create_node('type_meta_specifier', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3069 "langs_src/parser_cpp_language.php"
#line 185 "langs_src/parser_cpp_language.y"
    function yy_r17(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3075 "langs_src/parser_cpp_language.php"
#line 190 "langs_src/parser_cpp_language.y"
    function yy_r18(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('structure_body', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3081 "langs_src/parser_cpp_language.php"
#line 195 "langs_src/parser_cpp_language.y"
    function yy_r19(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3087 "langs_src/parser_cpp_language.php"
#line 200 "langs_src/parser_cpp_language.y"
    function yy_r20(){
	$this->currentrule = new block_formal_langs_description_rule("%l(stmt_or_visibility_spec)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3093 "langs_src/parser_cpp_language.php"
#line 207 "langs_src/parser_cpp_language.y"
    function yy_r21(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
	$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3100 "langs_src/parser_cpp_language.php"
#line 213 "langs_src/parser_cpp_language.y"
    function yy_r22(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3106 "langs_src/parser_cpp_language.php"
#line 218 "langs_src/parser_cpp_language.y"
    function yy_r23(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3112 "langs_src/parser_cpp_language.php"
#line 223 "langs_src/parser_cpp_language.y"
    function yy_r24(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "двоеточие"));
	$this->_retvalue = $this->create_node('visibility_spec_full', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3118 "langs_src/parser_cpp_language.php"
#line 228 "langs_src/parser_cpp_language.y"
    function yy_r25(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово открытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3124 "langs_src/parser_cpp_language.php"
#line 233 "langs_src/parser_cpp_language.y"
    function yy_r26(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово защищенной видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3130 "langs_src/parser_cpp_language.php"
#line 238 "langs_src/parser_cpp_language.y"
    function yy_r27(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово скрытой видимости"));
	$this->_retvalue = $this->create_node('visibility_spec', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3136 "langs_src/parser_cpp_language.php"
#line 243 "langs_src/parser_cpp_language.y"
    function yy_r28(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления сигнала"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3142 "langs_src/parser_cpp_language.php"
#line 248 "langs_src/parser_cpp_language.y"
    function yy_r29(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления слота"));
	$this->_retvalue = $this->create_node('signal_slots', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3148 "langs_src/parser_cpp_language.php"
#line 255 "langs_src/parser_cpp_language.y"
    function yy_r30(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3155 "langs_src/parser_cpp_language.php"
#line 261 "langs_src/parser_cpp_language.y"
    function yy_r31(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "%ur(именительный)", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -2]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3162 "langs_src/parser_cpp_language.php"
#line 267 "langs_src/parser_cpp_language.y"
    function yy_r32(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3168 "langs_src/parser_cpp_language.php"
#line 272 "langs_src/parser_cpp_language.y"
    function yy_r33(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%s", "%ur(именительный)", "%s", "точка с запятой"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -3]->minor->value());
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3175 "langs_src/parser_cpp_language.php"
#line 278 "langs_src/parser_cpp_language.y"
    function yy_r34(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово перечисления", "%ur(именительный)", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3181 "langs_src/parser_cpp_language.php"
#line 283 "langs_src/parser_cpp_language.y"
    function yy_r35(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3187 "langs_src/parser_cpp_language.php"
#line 288 "langs_src/parser_cpp_language.y"
    function yy_r36(){
	$this->currentrule = new block_formal_langs_description_rule("тело перечисления", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('enum_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3193 "langs_src/parser_cpp_language.php"
#line 293 "langs_src/parser_cpp_language.y"
    function yy_r37(){
	$this->currentrule = new block_formal_langs_description_rule("список значений перечисления %l(enum_value)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3199 "langs_src/parser_cpp_language.php"
#line 298 "langs_src/parser_cpp_language.y"
    function yy_r38(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('enum_value_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3205 "langs_src/parser_cpp_language.php"
#line 303 "langs_src/parser_cpp_language.y"
    function yy_r39(){
	$this->currentrule = new block_formal_langs_description_rule("%ur(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3211 "langs_src/parser_cpp_language.php"
#line 308 "langs_src/parser_cpp_language.y"
    function yy_r40(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "операция присвоения", "%s"));
	$this->_retvalue = $this->create_node('enum_value', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3217 "langs_src/parser_cpp_language.php"
#line 315 "langs_src/parser_cpp_language.y"
    function yy_r41(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3223 "langs_src/parser_cpp_language.php"
#line 325 "langs_src/parser_cpp_language.y"
    function yy_r43(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3229 "langs_src/parser_cpp_language.php"
#line 336 "langs_src/parser_cpp_language.y"
    function yy_r45(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor));
    }
#line 3235 "langs_src/parser_cpp_language.php"
#line 342 "langs_src/parser_cpp_language.y"
    function yy_r46(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("тип", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3241 "langs_src/parser_cpp_language.php"
#line 347 "langs_src/parser_cpp_language.y"
    function yy_r47(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3247 "langs_src/parser_cpp_language.php"
#line 352 "langs_src/parser_cpp_language.y"
    function yy_r48(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "оператор разрешения пространства имен", "тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor));
    }
#line 3253 "langs_src/parser_cpp_language.php"
#line 357 "langs_src/parser_cpp_language.y"
    function yy_r49(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3259 "langs_src/parser_cpp_language.php"
#line 362 "langs_src/parser_cpp_language.y"
    function yy_r50(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "оператор разрешения пространства имен", "тильда", "%s", "левая круглая скобка", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor));
    }
#line 3265 "langs_src/parser_cpp_language.php"
#line 373 "langs_src/parser_cpp_language.y"
    function yy_r51(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3271 "langs_src/parser_cpp_language.php"
#line 378 "langs_src/parser_cpp_language.y"
    function yy_r52(){
	$this->currentrule = new block_formal_langs_description_rule("определение шаблона", array("ключевое слово определения шаблона", "начало аргументов шаблона", "%ur(именительный)", "конец аргументов шаблона"));
	$this->_retvalue = $this->create_node('template_def', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3277 "langs_src/parser_cpp_language.php"
#line 383 "langs_src/parser_cpp_language.y"
    function yy_r53(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона %l(template_spec)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3283 "langs_src/parser_cpp_language.php"
#line 388 "langs_src/parser_cpp_language.y"
    function yy_r54(){
	$this->currentrule = new block_formal_langs_description_rule("список параметров шаблона", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('template_spec_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3289 "langs_src/parser_cpp_language.php"
#line 393 "langs_src/parser_cpp_language.y"
    function yy_r55(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + 0]->minor->value());
	$this->_retvalue = $this->create_node('template_spec', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3296 "langs_src/parser_cpp_language.php"
#line 400 "langs_src/parser_cpp_language.y"
    function yy_r56(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово имени типа"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3302 "langs_src/parser_cpp_language.php"
#line 405 "langs_src/parser_cpp_language.y"
    function yy_r57(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления класса"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3308 "langs_src/parser_cpp_language.php"
#line 410 "langs_src/parser_cpp_language.y"
    function yy_r58(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово объявления структуры"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3314 "langs_src/parser_cpp_language.php"
#line 415 "langs_src/parser_cpp_language.y"
    function yy_r59(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово перечисления"));
	$this->_retvalue = $this->create_node('template_typename', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3320 "langs_src/parser_cpp_language.php"
#line 421 "langs_src/parser_cpp_language.y"
    function yy_r60(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3326 "langs_src/parser_cpp_language.php"
#line 426 "langs_src/parser_cpp_language.y"
    function yy_r61(){
	$this->currentrule = new block_formal_langs_description_rule("тело функции", array("левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3332 "langs_src/parser_cpp_language.php"
#line 431 "langs_src/parser_cpp_language.y"
    function yy_r62(){
    $this->currentrule = new block_formal_langs_description_rule("тело функции", array("точка с запятой"));
	$this->_retvalue = $this->create_node('function_body', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3338 "langs_src/parser_cpp_language.php"
#line 437 "langs_src/parser_cpp_language.y"
    function yy_r63(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('possible_function_name', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3344 "langs_src/parser_cpp_language.php"
#line 442 "langs_src/parser_cpp_language.y"
    function yy_r64(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('possible_function_name', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3350 "langs_src/parser_cpp_language.php"
#line 455 "langs_src/parser_cpp_language.y"
    function yy_r66(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3356 "langs_src/parser_cpp_language.php"
#line 460 "langs_src/parser_cpp_language.y"
    function yy_r67(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "ключевое слово константности"));
	$this->_retvalue = $this->create_node('formal_args_list_with_or_without_const', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3362 "langs_src/parser_cpp_language.php"
#line 465 "langs_src/parser_cpp_language.y"
    function yy_r68(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('args_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3368 "langs_src/parser_cpp_language.php"
#line 470 "langs_src/parser_cpp_language.y"
    function yy_r69(){
	$this->currentrule = new block_formal_langs_description_rule("список формальных аргументов", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('formal_args_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3374 "langs_src/parser_cpp_language.php"
#line 475 "langs_src/parser_cpp_language.y"
    function yy_r70(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3380 "langs_src/parser_cpp_language.php"
#line 480 "langs_src/parser_cpp_language.y"
    function yy_r71(){
	$this->currentrule = new block_formal_langs_description_rule("список аргументов %l(arg)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('arg_list', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3386 "langs_src/parser_cpp_language.php"
#line 485 "langs_src/parser_cpp_language.y"
    function yy_r72(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('arg', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3392 "langs_src/parser_cpp_language.php"
#line 492 "langs_src/parser_cpp_language.y"
    function yy_r73(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3398 "langs_src/parser_cpp_language.php"
#line 497 "langs_src/parser_cpp_language.y"
    function yy_r74(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)", "%ur(именительный)", "ключевое слово конца условного блока препроцессора"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3404 "langs_src/parser_cpp_language.php"
#line 502 "langs_src/parser_cpp_language.y"
    function yy_r75(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3410 "langs_src/parser_cpp_language.php"
#line 507 "langs_src/parser_cpp_language.y"
    function yy_r76(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3416 "langs_src/parser_cpp_language.php"
#line 512 "langs_src/parser_cpp_language.y"
    function yy_r77(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else_clauses', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3422 "langs_src/parser_cpp_language.php"
#line 517 "langs_src/parser_cpp_language.y"
    function yy_r78(){
	$this->currentrule = new block_formal_langs_description_rule("список условий  препроцессора %l(preprocessor_elif)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3428 "langs_src/parser_cpp_language.php"
#line 522 "langs_src/parser_cpp_language.y"
    function yy_r79(){
	$this->currentrule = new block_formal_langs_description_rule("список условий препроцессора", array("%1(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3434 "langs_src/parser_cpp_language.php"
#line 527 "langs_src/parser_cpp_language.y"
    function yy_r80(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если-то\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_elif', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3440 "langs_src/parser_cpp_language.php"
#line 532 "langs_src/parser_cpp_language.y"
    function yy_r81(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое-слово \"если\" препроцессора", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('preprocessor_else', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3446 "langs_src/parser_cpp_language.php"
#line 537 "langs_src/parser_cpp_language.y"
    function yy_r82(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора с условием что макроопределение определено", "%s"));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, C));
    }
#line 3452 "langs_src/parser_cpp_language.php"
#line 547 "langs_src/parser_cpp_language.y"
    function yy_r84(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("условная директива препроцессора вида \"если\""));
	$this->_retvalue = $this->create_node('preprocessor_cond', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3458 "langs_src/parser_cpp_language.php"
#line 552 "langs_src/parser_cpp_language.y"
    function yy_r85(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor, B));
    }
#line 3464 "langs_src/parser_cpp_language.php"
#line 557 "langs_src/parser_cpp_language.y"
    function yy_r86(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt_or_defined_macro', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3470 "langs_src/parser_cpp_language.php"
#line 562 "langs_src/parser_cpp_language.y"
    function yy_r87(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3476 "langs_src/parser_cpp_language.php"
#line 574 "langs_src/parser_cpp_language.y"
    function yy_r88(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла с предусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('while', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3482 "langs_src/parser_cpp_language.php"
#line 586 "langs_src/parser_cpp_language.y"
    function yy_r89(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово  объявления цикла с постусловием", "%ur(именительный)", "ключевое слово начала условия в цикле с постусловием", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "точка с запятой"));
	$this->_retvalue = $this->create_node('do_while', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3488 "langs_src/parser_cpp_language.php"
#line 599 "langs_src/parser_cpp_language.y"
    function yy_r90(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово объявления цикла со счетчиком", "левая круглая скобка", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "точка с запятой", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('for', array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3494 "langs_src/parser_cpp_language.php"
#line 607 "langs_src/parser_cpp_language.y"
    function yy_r91(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3500 "langs_src/parser_cpp_language.php"
#line 612 "langs_src/parser_cpp_language.y"
    function yy_r92(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово возврата результата", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3506 "langs_src/parser_cpp_language.php"
#line 620 "langs_src/parser_cpp_language.y"
    function yy_r93(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово пропуска итерации цикла", "точка с запятой"));
	$this->_retvalue = $this->create_node('continue', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3512 "langs_src/parser_cpp_language.php"
#line 627 "langs_src/parser_cpp_language.y"
    function yy_r94(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово безусловного перехода", "имя метки перехода для  операции %ul(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('goto', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3518 "langs_src/parser_cpp_language.php"
#line 637 "langs_src/parser_cpp_language.y"
    function yy_r96(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("имя метки", "двоеточие"));
	$this->_retvalue = $this->create_node('goto_label', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3524 "langs_src/parser_cpp_language.php"
#line 644 "langs_src/parser_cpp_language.y"
    function yy_r97(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3530 "langs_src/parser_cpp_language.php"
#line 649 "langs_src/parser_cpp_language.y"
    function yy_r98(){
    $this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('try_catch', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3536 "langs_src/parser_cpp_language.php"
#line 654 "langs_src/parser_cpp_language.y"
    function yy_r99(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3542 "langs_src/parser_cpp_language.php"
#line 659 "langs_src/parser_cpp_language.y"
    function yy_r100(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово начала небезопасного блока", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('try', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3548 "langs_src/parser_cpp_language.php"
#line 664 "langs_src/parser_cpp_language.y"
    function yy_r101(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения %l(catch)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3554 "langs_src/parser_cpp_language.php"
#line 669 "langs_src/parser_cpp_language.y"
    function yy_r102(){
	$this->currentrule = new block_formal_langs_description_rule("список веток обработки исключения", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('catch_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3560 "langs_src/parser_cpp_language.php"
#line 674 "langs_src/parser_cpp_language.y"
    function yy_r103(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3566 "langs_src/parser_cpp_language.php"
#line 679 "langs_src/parser_cpp_language.y"
    function yy_r104(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветки исключения", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('catch', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3572 "langs_src/parser_cpp_language.php"
#line 684 "langs_src/parser_cpp_language.y"
    function yy_r105(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3578 "langs_src/parser_cpp_language.php"
#line 689 "langs_src/parser_cpp_language.y"
    function yy_r106(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("эллипсис"));
	$this->_retvalue = $this->create_node('expr_prec_11_or_ellipsis', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3584 "langs_src/parser_cpp_language.php"
#line 696 "langs_src/parser_cpp_language.y"
    function yy_r107(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3590 "langs_src/parser_cpp_language.php"
#line 703 "langs_src/parser_cpp_language.y"
    function yy_r108(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3596 "langs_src/parser_cpp_language.php"
#line 708 "langs_src/parser_cpp_language.y"
    function yy_r109(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3602 "langs_src/parser_cpp_language.php"
#line 713 "langs_src/parser_cpp_language.y"
    function yy_r110(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово ветвления", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "левая фигурная скобка", "%ur(именительный)", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('switch_stmt', array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3608 "langs_src/parser_cpp_language.php"
#line 718 "langs_src/parser_cpp_language.y"
    function yy_r111(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3614 "langs_src/parser_cpp_language.php"
#line 723 "langs_src/parser_cpp_language.y"
    function yy_r112(){
	$this->currentrule = new block_formal_langs_description_rule("список ветвлений %l(case)", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('switch_case_list', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3620 "langs_src/parser_cpp_language.php"
#line 728 "langs_src/parser_cpp_language.y"
    function yy_r113(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово, обозначающее ветку ветвления", "%ur(именительный)", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3626 "langs_src/parser_cpp_language.php"
#line 733 "langs_src/parser_cpp_language.y"
    function yy_r114(){
	$this->currentrule = new block_formal_langs_description_rule("ветка по умолчанию", array("ключевое слово, обозначающее ветку ветвления по умолчанию", "двоеточие", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('case', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3632 "langs_src/parser_cpp_language.php"
#line 745 "langs_src/parser_cpp_language.y"
    function yy_r116(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 3638 "langs_src/parser_cpp_language.php"
#line 750 "langs_src/parser_cpp_language.y"
    function yy_r117(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "ключевое слово \"иначе\"", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then_else', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3644 "langs_src/parser_cpp_language.php"
#line 755 "langs_src/parser_cpp_language.y"
    function yy_r118(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("ключевое слово \"если\"", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('if_then', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3650 "langs_src/parser_cpp_language.php"
#line 762 "langs_src/parser_cpp_language.y"
    function yy_r119(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая фигурная скобка", "%s", "правая фигурная скобка"));
	$this->_retvalue = $this->create_node('stmt', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3656 "langs_src/parser_cpp_language.php"
#line 767 "langs_src/parser_cpp_language.y"
    function yy_r120(){ 
	$this->currentrule = new block_formal_langs_description_rule("объявление синонима типа", array("ключевое слово объявления синонима типа", "%s", "%s", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
	$this->mapper->introduce_type($this->yystack[$this->yyidx + -1]->minor->value());
    }
#line 3663 "langs_src/parser_cpp_language.php"
#line 774 "langs_src/parser_cpp_language.y"
    function yy_r121(){
	$this->currentrule = new block_formal_langs_description_rule("прерывание работы", array("ключевое слово прерывания работы", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3669 "langs_src/parser_cpp_language.php"
#line 779 "langs_src/parser_cpp_language.y"
    function yy_r122(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)", "точка с запятой"));
	$this->_retvalue = $this->create_node('stmt', array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 3675 "langs_src/parser_cpp_language.php"
#line 786 "langs_src/parser_cpp_language.y"
    function yy_r123(){
	$this->currentrule = new block_formal_langs_description_rule("выделение памяти", array("ключевое слово выделения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3681 "langs_src/parser_cpp_language.php"
#line 791 "langs_src/parser_cpp_language.y"
    function yy_r124(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "левая квадратная скобка", "правая квадратная скобка", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3687 "langs_src/parser_cpp_language.php"
#line 796 "langs_src/parser_cpp_language.y"
    function yy_r125(){
	$this->currentrule = new block_formal_langs_description_rule("освобождение памяти", array("ключевое слово освобождения памяти", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3693 "langs_src/parser_cpp_language.php"
#line 801 "langs_src/parser_cpp_language.y"
    function yy_r126(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s", "оператор присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3699 "langs_src/parser_cpp_language.php"
#line 811 "langs_src/parser_cpp_language.y"
    function yy_r128(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3705 "langs_src/parser_cpp_language.php"
#line 816 "langs_src/parser_cpp_language.y"
    function yy_r129(){
    $this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3711 "langs_src/parser_cpp_language.php"
#line 821 "langs_src/parser_cpp_language.y"
    function yy_r130(){
	$this->currentrule = new block_formal_langs_description_rule("объявление переменной %2(имя переменной)", array("%ur(именительный)", "%s", "оператор присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -3]->minor,  $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3717 "langs_src/parser_cpp_language.php"
#line 841 "langs_src/parser_cpp_language.y"
    function yy_r134(){
	$this->currentrule = new block_formal_langs_description_rule("список выражений %l(expr_prec_10)", array("%ur(именительный)", "запятая", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3723 "langs_src/parser_cpp_language.php"
#line 846 "langs_src/parser_cpp_language.y"
    function yy_r135(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_11', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3729 "langs_src/parser_cpp_language.php"
#line 853 "langs_src/parser_cpp_language.y"
    function yy_r136(){
	$this->currentrule = new block_formal_langs_description_rule("тип с квалифицирующим словом", array("%ur(именительный)", "%ur(именительный)"));
	$result = $this->create_node('type_with_qualifier', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 3736 "langs_src/parser_cpp_language.php"
#line 859 "langs_src/parser_cpp_language.y"
    function yy_r137(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово для статичности значения"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3742 "langs_src/parser_cpp_language.php"
#line 864 "langs_src/parser_cpp_language.y"
    function yy_r138(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово импорта из внешней части"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3748 "langs_src/parser_cpp_language.php"
#line 869 "langs_src/parser_cpp_language.y"
    function yy_r139(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово, указания, что переменная должна содержаться в регистре процессора"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3754 "langs_src/parser_cpp_language.php"
#line 874 "langs_src/parser_cpp_language.y"
    function yy_r140(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово изменяемости"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3760 "langs_src/parser_cpp_language.php"
#line 879 "langs_src/parser_cpp_language.y"
    function yy_r141(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("ключевое слово дружественности"));
	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 3766 "langs_src/parser_cpp_language.php"
#line 886 "langs_src/parser_cpp_language.y"
    function yy_r142(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым исключающим ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового исключающего ИЛИ с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3772 "langs_src/parser_cpp_language.php"
#line 891 "langs_src/parser_cpp_language.y"
    function yy_r143(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового ИЛИ  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3778 "langs_src/parser_cpp_language.php"
#line 896 "langs_src/parser_cpp_language.y"
    function yy_r144(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с побитовым И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И  с присваиванием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3784 "langs_src/parser_cpp_language.php"
#line 901 "langs_src/parser_cpp_language.y"
    function yy_r145(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом вправо\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3790 "langs_src/parser_cpp_language.php"
#line 906 "langs_src/parser_cpp_language.y"
    function yy_r146(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание со сдвигом влево\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания со сдвигом влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3796 "langs_src/parser_cpp_language.php"
#line 911 "langs_src/parser_cpp_language.y"
    function yy_r147(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с получением остатка от деления\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с получением остатка от модуля", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
     }
#line 3802 "langs_src/parser_cpp_language.php"
#line 916 "langs_src/parser_cpp_language.y"
    function yy_r148(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с делением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с делением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3808 "langs_src/parser_cpp_language.php"
#line 921 "langs_src/parser_cpp_language.y"
    function yy_r149(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с умножением\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с умножением", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3814 "langs_src/parser_cpp_language.php"
#line 926 "langs_src/parser_cpp_language.y"
    function yy_r150(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с суммированием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с суммированием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3820 "langs_src/parser_cpp_language.php"
#line 931 "langs_src/parser_cpp_language.y"
    function yy_r151(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание с вычитанием\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания с вычитанием", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3826 "langs_src/parser_cpp_language.php"
#line 936 "langs_src/parser_cpp_language.y"
    function yy_r152(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"присваивание\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция присваивания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3832 "langs_src/parser_cpp_language.php"
#line 941 "langs_src/parser_cpp_language.y"
    function yy_r153(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_10', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3838 "langs_src/parser_cpp_language.php"
#line 948 "langs_src/parser_cpp_language.y"
    function yy_r154(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3844 "langs_src/parser_cpp_language.php"
#line 953 "langs_src/parser_cpp_language.y"
    function yy_r155(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3850 "langs_src/parser_cpp_language.php"
#line 958 "langs_src/parser_cpp_language.y"
    function yy_r156(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"логического И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция логического И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3856 "langs_src/parser_cpp_language.php"
#line 963 "langs_src/parser_cpp_language.y"
    function yy_r157(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"исключающего ИЛИ\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция исключающего ИЛИ", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3862 "langs_src/parser_cpp_language.php"
#line 968 "langs_src/parser_cpp_language.y"
    function yy_r158(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"побитового И\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция побитового И", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3868 "langs_src/parser_cpp_language.php"
#line 973 "langs_src/parser_cpp_language.y"
    function yy_r159(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"не равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция не равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3874 "langs_src/parser_cpp_language.php"
#line 978 "langs_src/parser_cpp_language.y"
    function yy_r160(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3880 "langs_src/parser_cpp_language.php"
#line 983 "langs_src/parser_cpp_language.y"
    function yy_r161(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_9', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3886 "langs_src/parser_cpp_language.php"
#line 990 "langs_src/parser_cpp_language.y"
    function yy_r162(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3892 "langs_src/parser_cpp_language.php"
#line 995 "langs_src/parser_cpp_language.y"
    function yy_r163(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше или равно\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше или равно", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3898 "langs_src/parser_cpp_language.php"
#line 1000 "langs_src/parser_cpp_language.y"
    function yy_r164(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"больше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция больше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3904 "langs_src/parser_cpp_language.php"
#line 1005 "langs_src/parser_cpp_language.y"
    function yy_r165(){
	$this->currentrule = new block_formal_langs_description_rule("операция \"меньше\"  на выражениях \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция меньше", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3910 "langs_src/parser_cpp_language.php"
#line 1010 "langs_src/parser_cpp_language.y"
    function yy_r166(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_8', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3916 "langs_src/parser_cpp_language.php"
#line 1017 "langs_src/parser_cpp_language.y"
    function yy_r167(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг влево выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига влево", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3922 "langs_src/parser_cpp_language.php"
#line 1022 "langs_src/parser_cpp_language.y"
    function yy_r168(){
	$this->currentrule = new block_formal_langs_description_rule("сдвиг вправо выражения %1(именительный) на число байт, заданное выражением %3(именительный)", array("%ur(именительный)", "операция сдвига вправо", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3928 "langs_src/parser_cpp_language.php"
#line 1027 "langs_src/parser_cpp_language.y"
    function yy_r169(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_7', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3934 "langs_src/parser_cpp_language.php"
#line 1034 "langs_src/parser_cpp_language.y"
    function yy_r170(){
	$this->currentrule = new block_formal_langs_description_rule("разность выражений \"%1(именительный)\" и \"%3(именительный)\"", array("%ur(именительный)", "операция вычитания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3940 "langs_src/parser_cpp_language.php"
#line 1039 "langs_src/parser_cpp_language.y"
    function yy_r171(){
	$this->currentrule = new block_formal_langs_description_rule("сумма %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция суммирования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3946 "langs_src/parser_cpp_language.php"
#line 1044 "langs_src/parser_cpp_language.y"
    function yy_r172(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_6', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3952 "langs_src/parser_cpp_language.php"
#line 1051 "langs_src/parser_cpp_language.y"
    function yy_r173(){
	$this->currentrule = new block_formal_langs_description_rule("получение остатка от деления выражений %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция получения остатка от деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3958 "langs_src/parser_cpp_language.php"
#line 1056 "langs_src/parser_cpp_language.y"
    function yy_r174(){
	$this->currentrule = new block_formal_langs_description_rule("деление %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция деления", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3964 "langs_src/parser_cpp_language.php"
#line 1061 "langs_src/parser_cpp_language.y"
    function yy_r175(){
	$this->currentrule = new block_formal_langs_description_rule("умножение %1(именительный) и %3(именительный)", array("%ur(именительный)", "операция умножения", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3970 "langs_src/parser_cpp_language.php"
#line 1066 "langs_src/parser_cpp_language.y"
    function yy_r176(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_5', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 3976 "langs_src/parser_cpp_language.php"
#line 1073 "langs_src/parser_cpp_language.y"
    function yy_r177(){
	$this->currentrule = new block_formal_langs_description_rule("взятие поля по указателю", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('expr_prec_4', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3982 "langs_src/parser_cpp_language.php"
#line 1083 "langs_src/parser_cpp_language.y"
    function yy_r179(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_4', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3988 "langs_src/parser_cpp_language.php"
#line 1090 "langs_src/parser_cpp_language.y"
    function yy_r180(){
	$this->currentrule = new block_formal_langs_description_rule("операция взятия указателя", array("операция взятия указателя", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 3994 "langs_src/parser_cpp_language.php"
#line 1095 "langs_src/parser_cpp_language.y"
    function yy_r181(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя", array("операция разыменования", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4000 "langs_src/parser_cpp_language.php"
#line 1100 "langs_src/parser_cpp_language.y"
    function yy_r182(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу", array("%ur(именительный)", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4006 "langs_src/parser_cpp_language.php"
#line 1105 "langs_src/parser_cpp_language.y"
    function yy_r183(){
	$this->currentrule = new block_formal_langs_description_rule("логическое отрицание на выражении %2(именительный)", array("операция логического отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4012 "langs_src/parser_cpp_language.php"
#line 1110 "langs_src/parser_cpp_language.y"
    function yy_r184(){
	$this->currentrule = new block_formal_langs_description_rule("побитовое отрицание на выражении %2(именительный)", array("операция побитового отрицания", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4018 "langs_src/parser_cpp_language.php"
#line 1115 "langs_src/parser_cpp_language.y"
    function yy_r185(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного минуса на выражении %2(именительный)", array("операция унарного минуса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4024 "langs_src/parser_cpp_language.php"
#line 1120 "langs_src/parser_cpp_language.y"
    function yy_r186(){
	$this->currentrule = new block_formal_langs_description_rule("операция унарного плюса на выражении %2(именительный)", array("операция унарного плюса", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4030 "langs_src/parser_cpp_language.php"
#line 1125 "langs_src/parser_cpp_language.y"
    function yy_r187(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция декремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4036 "langs_src/parser_cpp_language.php"
#line 1130 "langs_src/parser_cpp_language.y"
    function yy_r188(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("операция инкремента", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4042 "langs_src/parser_cpp_language.php"
#line 1135 "langs_src/parser_cpp_language.y"
    function yy_r189(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('expr_prec_3', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 4048 "langs_src/parser_cpp_language.php"
#line 1142 "langs_src/parser_cpp_language.y"
    function yy_r190(){
	$this->currentrule = new block_formal_langs_description_rule("обращение к полю по указателю на метод", array("%ur(именительный)", "имя свойства"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4054 "langs_src/parser_cpp_language.php"
#line 1152 "langs_src/parser_cpp_language.y"
    function yy_r192(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный) выражения \"%3(именительный)\"", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4060 "langs_src/parser_cpp_language.php"
#line 1157 "langs_src/parser_cpp_language.y"
    function yy_r193(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая квадратная скобка", "%ur(именительный)", "правая квадратная скобка"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4066 "langs_src/parser_cpp_language.php"
#line 1162 "langs_src/parser_cpp_language.y"
    function yy_r194(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4072 "langs_src/parser_cpp_language.php"
#line 1167 "langs_src/parser_cpp_language.y"
    function yy_r195(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "левая круглая скобка", "правая круглая скобка"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4078 "langs_src/parser_cpp_language.php"
#line 1172 "langs_src/parser_cpp_language.y"
    function yy_r196(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция инкремента"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4084 "langs_src/parser_cpp_language.php"
#line 1177 "langs_src/parser_cpp_language.y"
    function yy_r197(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "операция декремента"));
	$this->_retvalue = $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4090 "langs_src/parser_cpp_language.php"
#line 1182 "langs_src/parser_cpp_language.y"
    function yy_r198(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue =  $this->create_node('expr_prec_2', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4096 "langs_src/parser_cpp_language.php"
#line 1189 "langs_src/parser_cpp_language.y"
    function yy_r199(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или поля переменной"));
	$this->_retvalue = $this->create_node('try_value_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4102 "langs_src/parser_cpp_language.php"
#line 1194 "langs_src/parser_cpp_language.y"
    function yy_r200(){
	$this->currentrule = new block_formal_langs_description_rule("операция разыменования указателя на метод или переменной", array("%ur (именительный)", "операция взятия указателя на метод или переменной"));
	$this->_retvalue = $this->create_node('try_pointer_access', array( $this->yystack[$this->yyidx + -1]->minor , $this->yystack[$this->yyidx + 0]->minor) );
    }
#line 4108 "langs_src/parser_cpp_language.php"
#line 1201 "langs_src/parser_cpp_language.y"
    function yy_r201(){
	$this->currentrule = new block_formal_langs_description_rule("приведение со снятием константности к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('cpp_style_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4114 "langs_src/parser_cpp_language.php"
#line 1206 "langs_src/parser_cpp_language.y"
    function yy_r202(){
	$this->currentrule = new block_formal_langs_description_rule("статическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('cpp_style_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4120 "langs_src/parser_cpp_language.php"
#line 1211 "langs_src/parser_cpp_language.y"
    function yy_r203(){
	$this->currentrule = new block_formal_langs_description_rule("динамическое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('cpp_style_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4126 "langs_src/parser_cpp_language.php"
#line 1216 "langs_src/parser_cpp_language.y"
    function yy_r204(){
	$this->currentrule = new block_formal_langs_description_rule("побайтовое приведение к %3(родительный) типу ", array("ключевое слово приведения типа", "знак \"меньше\"", "%ur(именительный)", "знак \"больше\""));
	$this->_retvalue = $this->create_node('cpp_style_cast', array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4132 "langs_src/parser_cpp_language.php"
#line 1223 "langs_src/parser_cpp_language.y"
    function yy_r205(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4138 "langs_src/parser_cpp_language.php"
#line 1243 "langs_src/parser_cpp_language.y"
    function yy_r209(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("левая круглая скобка", "%s", "провая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4144 "langs_src/parser_cpp_language.php"
#line 1248 "langs_src/parser_cpp_language.y"
    function yy_r210(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s"));
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4150 "langs_src/parser_cpp_language.php"
#line 1253 "langs_src/parser_cpp_language.y"
    function yy_r211(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4156 "langs_src/parser_cpp_language.php"
#line 1258 "langs_src/parser_cpp_language.y"
    function yy_r212(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4162 "langs_src/parser_cpp_language.php"
#line 1263 "langs_src/parser_cpp_language.y"
    function yy_r213(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("операция взятия размера структуры", "левая круглая скобка", "%s", "правая круглая скобка"));
	$this->_retvalue =  $this->create_node('expr_atom', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4168 "langs_src/parser_cpp_language.php"
#line 1270 "langs_src/parser_cpp_language.y"
    function yy_r214(){
	$this->currentrule = new block_formal_langs_description_rule("операция приведения к типу %2(именительный) ", array("левая круглая скобка", "%ur(именительный)", "правая круглая скобка"));
	$result = $this->create_node('typecast', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
	$this->_retvalue = $result;
    }
#line 4175 "langs_src/parser_cpp_language.php"
#line 1278 "langs_src/parser_cpp_language.y"
    function yy_r215(){
	$this->currentrule = new block_formal_langs_description_rule("список типов", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('type_list', array( $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 4181 "langs_src/parser_cpp_language.php"
#line 1283 "langs_src/parser_cpp_language.y"
    function yy_r216(){
	$this->currentrule = new block_formal_langs_description_rule("%l(type)", array("список типов", "запятая", "%n-ый тип"));
	$this->_retvalue = $this->create_node('type_list', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ) );
    }
#line 4187 "langs_src/parser_cpp_language.php"
#line 1290 "langs_src/parser_cpp_language.y"
    function yy_r217(){
	$this->currentrule = new block_formal_langs_description_rule("константный тип %1(именительный) ", array("признак константности", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4193 "langs_src/parser_cpp_language.php"
#line 1295 "langs_src/parser_cpp_language.y"
    function yy_r218(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
    $this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4199 "langs_src/parser_cpp_language.php"
#line 1300 "langs_src/parser_cpp_language.y"
    function yy_r219(){
	$this->currentrule = new block_formal_langs_description_rule("указатель на переменную %1(родительный) типа", array("%ur(именительный)", "признак указателя"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4205 "langs_src/parser_cpp_language.php"
#line 1305 "langs_src/parser_cpp_language.y"
    function yy_r220(){
	$this->currentrule = new block_formal_langs_description_rule("указатель на константную переменную %1(родительный) типа", array("%ur(именительный)", "ключевое слово константности", "признак указателя"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4211 "langs_src/parser_cpp_language.php"
#line 1310 "langs_src/parser_cpp_language.y"
    function yy_r221(){
	$this->currentrule = new block_formal_langs_description_rule("ссылка на  переменную %1(родительный) типа", array("%ur(именительный)", "амперсанд"));
	$this->_retvalue = $this->create_node('type', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4217 "langs_src/parser_cpp_language.php"
#line 1315 "langs_src/parser_cpp_language.y"
    function yy_r222(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%ur(именительный)"));
	$this->_retvalue = $this->create_node('non_const_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4223 "langs_src/parser_cpp_language.php"
#line 1325 "langs_src/parser_cpp_language.y"
    function yy_r224(){
	$this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4229 "langs_src/parser_cpp_language.php"
#line 1330 "langs_src/parser_cpp_language.y"
    function yy_r225(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%s"));
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4235 "langs_src/parser_cpp_language.php"
#line 1335 "langs_src/parser_cpp_language.y"
    function yy_r226(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%s", "%s", "%ur(именительный)", "%s"));
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4241 "langs_src/parser_cpp_language.php"
#line 1340 "langs_src/parser_cpp_language.y"
    function yy_r227(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s"));
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4247 "langs_src/parser_cpp_language.php"
#line 1349 "langs_src/parser_cpp_language.y"
    function yy_r229(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%s", "%s"));
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4253 "langs_src/parser_cpp_language.php"
#line 1354 "langs_src/parser_cpp_language.y"
    function yy_r230(){
	$this->currentrule = new block_formal_langs_description_rule("%s", array("%ur(именительный)", "%s", "%s", "%s", "%ur", "%s"));
	$this->_retvalue = $this->create_node('primitive_or_complex_type', array( $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 4259 "langs_src/parser_cpp_language.php"
#line 1359 "langs_src/parser_cpp_language.y"
    function yy_r231(){
    $this->currentrule = new block_formal_langs_description_rule("знаковое %2(именительный)", array("признак присутствия знака", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4265 "langs_src/parser_cpp_language.php"
#line 1364 "langs_src/parser_cpp_language.y"
    function yy_r232(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковое %2(именительный)", array("признак беззнаковости", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4271 "langs_src/parser_cpp_language.php"
#line 1369 "langs_src/parser_cpp_language.y"
    function yy_r233(){
    $this->currentrule = new block_formal_langs_description_rule("длинное %2(именительный)", array("признак длинного целого", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4277 "langs_src/parser_cpp_language.php"
#line 1374 "langs_src/parser_cpp_language.y"
    function yy_r234(){
    $this->currentrule = new block_formal_langs_description_rule("длинное %3(именительный)", array("признак длинного целого", "признак длинного целого", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4283 "langs_src/parser_cpp_language.php"
#line 1379 "langs_src/parser_cpp_language.y"
    function yy_r235(){
    $this->currentrule = new block_formal_langs_description_rule("беззнаковое длинное %4(именительный)", array("признак беззнаковости", "признак длинного целого", "признак длинного целого", "%ur(именительный)"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4289 "langs_src/parser_cpp_language.php"
#line 1384 "langs_src/parser_cpp_language.y"
    function yy_r236(){
    $this->currentrule = new block_formal_langs_description_rule("%1(именительный)", array("%s"));
	$this->_retvalue = $this->create_node('builtintype', array( $this->yystack[$this->yyidx + 0]->minor ));
    }
#line 4295 "langs_src/parser_cpp_language.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //lock_formal_langs_parser_cpp_languageyyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 37 "langs_src/parser_cpp_language.y"

    $this->error = true;
    $stack = array();
    foreach($this->yystack as $entry) {
        if ($entry->minor != null) {
            $stack[] = $entry->minor;
        }
    }
     // var_dump(array_map(function($a) { return $a->type() . ' ';  }, $stack));
    if (is_array($this->root)) {
        if (count($this->root)) {
            $this->root = array_merge($this->root, $stack);
        }
        else {
            $this->root  = $stack;
        }
    } else {
        $this->root = $stack;
    }
    /*
    echo "Syntax Error on line " . $this->lex->line . ": token '" .
        $this->lex->value . "' while parsing rule:\n";
    echo "Stack: ";
	foreach ($this->yystack as $entry) {
        echo self::$yyTokenName[$entry->major] . "\n";
    }
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
	throw new Exception(implode(',', $expect));
	*/
#line 4440 "langs_src/parser_cpp_language.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

	public $repeatlookup = false;
	
    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new lock_formal_langs_parser_cpp_languageyyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
			if ($this->repeatlookup)
			{
				$oldmajor = $yymajor;
				$yymajor = $this->perform_repeat_lookup($yymajor, $yytokenvalue);
				/*
				if ($oldmajor != $yymajor)
				{				
					echo "Replaced value " 
					   . $yytokenvalue->value() 
					   . " of type \"" .  $yytokenvalue->type() 
					   . "\" to \""      . (int)$yymajor . "\"\r\n";
				}
				*/
			}
			$yyact = $this->yy_find_shift_action($yymajor);
            
			if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
